"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4867],{7248:function(e,a,p){p.r(a),p(3696);var n=p(1445);function t(){return t=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var p=arguments[a];for(var n in p)Object.prototype.hasOwnProperty.call(p,n)&&(e[n]=p[n])}return e},t.apply(this,arguments)}function r(e){let{components:a,...p}=e;return(0,n.yg)("wrapper",t({components:a},p),(0,n.yg)("p",null,"하나의 파일이 다른 파일에 의존할 때마다, webpack은 이것을 ",(0,n.yg)("em",{parentName:"p"},"의존성으로")," 취급합니다. 이를 통해 webpack은 이미지 또는 웹 폰트와 같은 코드가 아닌 애셋을 가져와, 애플리케이션에 ",(0,n.yg)("em",{parentName:"p"},"의존성으로")," 제공할 수 있습니다."),(0,n.yg)("p",null,"webpack은 애플리케이션을 처리할 때, 커맨드 라인 또는 설정 파일에 정의 된 모듈 목록에서 시작합니다.\n",(0,n.yg)("a",{href:"/concepts/entry-points/",parentName:"p"},(0,n.yg)("em",{parentName:"a"},"엔트리 포인트")),"에서 시작하여, webpack은 애플리케이션에서 필요한 모든 모듈을 포함하는 ",(0,n.yg)("em",{parentName:"p"},"디펜던시 그래프를")," 재귀적으로 빌드한 다음, 모든 모듈을 브라우저에 의해 로드 되는 작은 수(보통 하나)의 ",(0,n.yg)("em",{parentName:"p"},"번들로")," 묶습니다."),(0,n.yg)("aside",{className:"tip"},(0,n.yg)("h6",{className:"tip__prefix",parentName:"aside"},"tip"),(0,n.yg)("p",{parentName:"aside"},"애플리케이션 번들링은 브라우저가 새 요청을 시작하는 동안 앱이 기다려야 하는 횟수를 최소화하므로 ",(0,n.yg)("em",{parentName:"p"},"HTTP/1.1")," 클라이언트에 특히 강력합니다. ",(0,n.yg)("em",{parentName:"p"},"HTTP/2의")," 경우, ",(0,n.yg)("a",{href:"/guides/code-splitting/",parentName:"p"},"코드 스플리팅"),"을 사용하여 좋은 결과를 얻을 수도 있습니다.")))}r.isMDXComponent=!0,a.default=r}}]);