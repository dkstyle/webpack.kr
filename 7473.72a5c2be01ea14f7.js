"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7473],{7473:function(a,e,n){n.r(e),n(3696);var t=n(1445);function s(){return s=Object.assign?Object.assign.bind():function(a){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(a[t]=n[t])}return a},s.apply(this,arguments)}function p(a){let{components:e,...n}=a;return(0,t.yg)("wrapper",s({components:e},n),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"CommonsChunkPlugin"),"은 여러 엔트리 포인트 간에 공유되는 공통 모듈로 이루어진 별도의 파일(청크라고 합니다)을 만드는 opt-in 기능입니다."),(0,t.yg)("aside",{className:"warning"},(0,t.yg)("h6",{className:"warning__prefix",parentName:"aside"},"warning"),(0,t.yg)("p",{parentName:"aside"},"CommonsChunkPlugin은 webpack v4(legato)에서 제거되었습니다. 최신 버전에서 청크가 처리되는 방식을 알아보려면 ",(0,t.yg)("a",{href:"/plugins/split-chunks-plugin/",parentName:"p"},"SplitChunksPlugin"),"을 확인하세요.")),(0,t.yg)("p",null,"번들에서 공통 모듈을 분리한 결과로 생성된 청크 파일을 처음에 한 번 로드하고 나중에 사용하기 위해 캐시에 저장할 수 있습니다. 이로 인해 브라우저가 새 페이지를 방문할 때마다 더 큰 번들을 로드하지 않고 캐시에서 공유 코드를 빠르게 제공할 수 있으므로 페이지 속도가 최적화됩니다."),(0,t.yg)("pre",null,(0,t.yg)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.yg)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.yg)("span",{className:"token class-name",parentName:"code"},"webpack",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"optimize",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"CommonsChunkPlugin"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"("),"options",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.yg)("h2",null,(0,t.yg)("span",{id:"options",parentName:"h2"}),"Options",(0,t.yg)("a",{href:"#options","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.yg)("span",{className:"header-link",parentName:"a"}))),(0,t.yg)("pre",null,(0,t.yg)("code",{className:"hljs language-ts",parentName:"pre"},(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  name",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token builtin",parentName:"code"},"string"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// 또는"),"\n  names",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token builtin",parentName:"code"},"string"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// 공통 청크의 청크 이름입니다. 청크의 이름을 전달하여 기존 청크를 선택할 수 있습니다."),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// 문자열 배열로 전달되면 각 청크 이름에 대해 플러그인을 여러 번 호출하는 것과 같습니다."),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// 생략하면 `options.async` 또는 `options.children`이 설정되고 모든 청크가 사용됩니다."),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// 그렇지 않으면 청크 이름으로 사용되는 `options.filename`이 사용되게 됩니다."),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// `options.async`를 사용하여 다른 비동기 청크에서 공통 청크를 만들 때 `option.name`을 생략하는 대신 여기에"),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// 엔트리 포인트 청크 이름을 지정해야 합니다."),"\n\n  filename",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token builtin",parentName:"code"},"string"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// 공통 청크의 파일 이름 템플릿입니다. `output.filename`과 동일한 플레이스홀더를 포함할 수 있습니다."),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// 생략하면 원본 파일 이름은 수정되지 않습니다(일반적으로 `output.filename` 혹은 `output.chunkFilename`)."),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// 이 옵션은 `options.async`를 사용하는 경우에도 허용되지 않습니다. 자세한 내용은 아래를 참조하세요."),"\n\n  minChunks",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token builtin",parentName:"code"},"number"),(0,t.yg)("span",{className:"token operator",parentName:"code"},"|"),(0,t.yg)("span",{className:"token number",parentName:"code"},"Infinity"),(0,t.yg)("span",{className:"token operator",parentName:"code"},"|"),(0,t.yg)("span",{className:"token keyword",parentName:"code"},"function"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.yg)("span",{className:"token keyword",parentName:"code"},"module"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},",")," count",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.yg)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.yg)("span",{className:"token builtin",parentName:"code"},"boolean"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// 공통 청크로 이동하기 전에 모듈을 포함해야 하는 최소 청크 수입니다."),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// 숫자는 2보다 크거나 같고 청크 수보다 작거나 같아야 합니다."),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// `Infinity`를 전달하면 공통 청크가 생성되지만 모듈은 이동하지 않습니다."),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// `function`을 제공하여 맞춤 로직을 추가 할 수 있습니다.(기본값은 청크의 수입니다)"),"\n\n  chunks",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token builtin",parentName:"code"},"string"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// 청크 이름으로 소스 청크를 선택합니다. 청크는 공통 청크의 자식이어야 합니다."),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// 생략하면 모든 엔트리 청크가 선택됩니다."),"\n\n  children",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token builtin",parentName:"code"},"boolean"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// `true`이면 공통 청크의 모든 자식이 선택됩니다."),"\n\n  deepChildren",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token builtin",parentName:"code"},"boolean"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// `true`이면 공통 청크의 모든 자손이 선택됩니다."),"\n\n  ",(0,t.yg)("span",{className:"token keyword",parentName:"code"},"async"),(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token builtin",parentName:"code"},"boolean"),(0,t.yg)("span",{className:"token operator",parentName:"code"},"|"),(0,t.yg)("span",{className:"token builtin",parentName:"code"},"string"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// `true`이면 새로운 비동기 공통 청크가 `options.name`의 하위 항목 및 `options.chunks`와 동등한 항목으로 생성됩니다."),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// `options.chunks`와 병렬로 로드됩니다."),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// `option.filename`을 사용하는 대신 `true`가 아닌 원하는 문자열을 제공해"),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// 출력 파일의 이름을 변경할 수 있습니다."),"\n\n  minSize",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token builtin",parentName:"code"},"number"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// 공통 청크가 생성되기 전 모든 공통 모듈의 최소 사이즈입니다."),"\n",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"}"))),(0,t.yg)("h2",null,(0,t.yg)("span",{id:"examples",parentName:"h2"}),"Examples",(0,t.yg)("a",{href:"#examples","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.yg)("span",{className:"header-link",parentName:"a"}))),(0,t.yg)("h3",null,(0,t.yg)("span",{id:"commons-chunk-for-entries",parentName:"h3"}),"Commons chunk for entries",(0,t.yg)("a",{href:"#commons-chunk-for-entries","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.yg)("span",{className:"header-link",parentName:"a"}))),(0,t.yg)("p",null,"엔트리 포인트 간에 공유되는 공통 모듈을 포함하는 추가 청크를 생성합니다."),(0,t.yg)("pre",null,(0,t.yg)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.yg)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.yg)("span",{className:"token class-name",parentName:"code"},"webpack",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"optimize",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"CommonsChunkPlugin"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  name",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token string",parentName:"code"},"'commons'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// (공통 청크 이름)"),"\n\n  filename",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token string",parentName:"code"},"'commons.js'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// (공통 청크의 파일 이름)"),"\n\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// minChunks: 3,"),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// (모듈은 최소 3개의 엔트리 사이에서 공유해야 합니다)"),"\n\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},'// chunks: ["pageA", "pageB"],'),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// (이 엔트리에서만 사용됩니다)"),"\n",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.yg)("p",null,"생성된 청크는 엔트리 포인트 전에 로드해야 합니다."),(0,t.yg)("pre",null,(0,t.yg)("code",{className:"hljs language-html",parentName:"pre"},(0,t.yg)("span",{className:"token tag",parentName:"code"},(0,t.yg)("span",{className:"token tag",parentName:"span"},(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"<"),"script")," ",(0,t.yg)("span",{className:"token attr-name",parentName:"span"},"src"),(0,t.yg)("span",{className:"token attr-value",parentName:"span"},(0,t.yg)("span",{className:"token punctuation attr-equals",parentName:"span"},"="),(0,t.yg)("span",{className:"token punctuation",parentName:"span"},'"'),"commons.js",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},'"'))," ",(0,t.yg)("span",{className:"token attr-name",parentName:"span"},"charset"),(0,t.yg)("span",{className:"token attr-value",parentName:"span"},(0,t.yg)("span",{className:"token punctuation attr-equals",parentName:"span"},"="),(0,t.yg)("span",{className:"token punctuation",parentName:"span"},'"'),"utf-8",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},'"')),(0,t.yg)("span",{className:"token punctuation",parentName:"span"},">")),(0,t.yg)("span",{className:"token script",parentName:"code"}),(0,t.yg)("span",{className:"token tag",parentName:"code"},(0,t.yg)("span",{className:"token tag",parentName:"span"},(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"</"),"script"),(0,t.yg)("span",{className:"token punctuation",parentName:"span"},">")),"\n",(0,t.yg)("span",{className:"token tag",parentName:"code"},(0,t.yg)("span",{className:"token tag",parentName:"span"},(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"<"),"script")," ",(0,t.yg)("span",{className:"token attr-name",parentName:"span"},"src"),(0,t.yg)("span",{className:"token attr-value",parentName:"span"},(0,t.yg)("span",{className:"token punctuation attr-equals",parentName:"span"},"="),(0,t.yg)("span",{className:"token punctuation",parentName:"span"},'"'),"entry.bundle.js",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},'"'))," ",(0,t.yg)("span",{className:"token attr-name",parentName:"span"},"charset"),(0,t.yg)("span",{className:"token attr-value",parentName:"span"},(0,t.yg)("span",{className:"token punctuation attr-equals",parentName:"span"},"="),(0,t.yg)("span",{className:"token punctuation",parentName:"span"},'"'),"utf-8",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},'"')),(0,t.yg)("span",{className:"token punctuation",parentName:"span"},">")),(0,t.yg)("span",{className:"token script",parentName:"code"}),(0,t.yg)("span",{className:"token tag",parentName:"code"},(0,t.yg)("span",{className:"token tag",parentName:"span"},(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"</"),"script"),(0,t.yg)("span",{className:"token punctuation",parentName:"span"},">")))),(0,t.yg)("h3",null,(0,t.yg)("span",{id:"explicit-vendor-chunk",parentName:"h3"}),"Explicit vendor chunk",(0,t.yg)("a",{href:"#explicit-vendor-chunk","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.yg)("span",{className:"header-link",parentName:"a"}))),(0,t.yg)("p",null,"코드를 vendor와 애플리케이션으로 분할합니다."),(0,t.yg)("pre",null,(0,t.yg)("code",{className:"hljs language-javascript",parentName:"pre"},"module",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.yg)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"//..."),"\n  entry",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    vendor",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.yg)("span",{className:"token string",parentName:"code"},"'jquery'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.yg)("span",{className:"token string",parentName:"code"},"'other-lib'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n    app",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token string",parentName:"code"},"'./entry'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  plugins",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"["),"\n    ",(0,t.yg)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.yg)("span",{className:"token class-name",parentName:"code"},"webpack",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"optimize",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"CommonsChunkPlugin"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      name",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token string",parentName:"code"},"'vendor'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,t.yg)("span",{className:"token comment",parentName:"code"},'// filename: "vendor.js"'),"\n      ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// (청크에 다른 이름을 지정하세요)"),"\n\n      minChunks",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token number",parentName:"code"},"Infinity"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// (엔트리가 더 많으면 다른 모듈이 vendor 청크로"),"\n      ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"//  들어가지 않습니다)"),"\n    ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.yg)("pre",null,(0,t.yg)("code",{className:"hljs language-html",parentName:"pre"},(0,t.yg)("span",{className:"token tag",parentName:"code"},(0,t.yg)("span",{className:"token tag",parentName:"span"},(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"<"),"script")," ",(0,t.yg)("span",{className:"token attr-name",parentName:"span"},"src"),(0,t.yg)("span",{className:"token attr-value",parentName:"span"},(0,t.yg)("span",{className:"token punctuation attr-equals",parentName:"span"},"="),(0,t.yg)("span",{className:"token punctuation",parentName:"span"},'"'),"vendor.js",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},'"'))," ",(0,t.yg)("span",{className:"token attr-name",parentName:"span"},"charset"),(0,t.yg)("span",{className:"token attr-value",parentName:"span"},(0,t.yg)("span",{className:"token punctuation attr-equals",parentName:"span"},"="),(0,t.yg)("span",{className:"token punctuation",parentName:"span"},'"'),"utf-8",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},'"')),(0,t.yg)("span",{className:"token punctuation",parentName:"span"},">")),(0,t.yg)("span",{className:"token script",parentName:"code"}),(0,t.yg)("span",{className:"token tag",parentName:"code"},(0,t.yg)("span",{className:"token tag",parentName:"span"},(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"</"),"script"),(0,t.yg)("span",{className:"token punctuation",parentName:"span"},">")),"\n",(0,t.yg)("span",{className:"token tag",parentName:"code"},(0,t.yg)("span",{className:"token tag",parentName:"span"},(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"<"),"script")," ",(0,t.yg)("span",{className:"token attr-name",parentName:"span"},"src"),(0,t.yg)("span",{className:"token attr-value",parentName:"span"},(0,t.yg)("span",{className:"token punctuation attr-equals",parentName:"span"},"="),(0,t.yg)("span",{className:"token punctuation",parentName:"span"},'"'),"app.js",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},'"'))," ",(0,t.yg)("span",{className:"token attr-name",parentName:"span"},"charset"),(0,t.yg)("span",{className:"token attr-value",parentName:"span"},(0,t.yg)("span",{className:"token punctuation attr-equals",parentName:"span"},"="),(0,t.yg)("span",{className:"token punctuation",parentName:"span"},'"'),"utf-8",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},'"')),(0,t.yg)("span",{className:"token punctuation",parentName:"span"},">")),(0,t.yg)("span",{className:"token script",parentName:"code"}),(0,t.yg)("span",{className:"token tag",parentName:"code"},(0,t.yg)("span",{className:"token tag",parentName:"span"},(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"</"),"script"),(0,t.yg)("span",{className:"token punctuation",parentName:"span"},">")))),(0,t.yg)("aside",{className:"tip"},(0,t.yg)("h6",{className:"tip__prefix",parentName:"aside"},"tip"),(0,t.yg)("p",{parentName:"aside"},"장기 캐시와 함께 vendor 청크 변경을 방지하기 위해 ",(0,t.yg)("inlineCode",{parentName:"p"},"ChunkManifestWebpackPlugin"),"을 사용해야 할 수 있습니다. 또한 안정적인 모듈 ID를 보장하기 위해 ",(0,t.yg)("inlineCode",{parentName:"p"},"NamedModulesPlugin")," 혹은 ",(0,t.yg)("a",{href:"/plugins/hashed-module-ids-plugin",parentName:"p"},(0,t.yg)("inlineCode",{parentName:"a"},"HashedModuleIdsPlugin")),"와 같은 레코드 플러그인을 사용해야 합니다.")),(0,t.yg)("h3",null,(0,t.yg)("span",{id:"move-common-modules-into-the-parent-chunk",parentName:"h3"}),"Move common modules into the parent chunk",(0,t.yg)("a",{href:"#move-common-modules-into-the-parent-chunk","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.yg)("span",{className:"header-link",parentName:"a"}))),(0,t.yg)("p",null,(0,t.yg)("a",{href:"/guides/code-splitting",parentName:"p"},"Code Splitting"),"을 사용하면 엔트리 청크의 여러 하위(자식) 청크가 공통 종속성을 가질 수 있습니다. 중복을 방지하기 위해 이들을 부모 청크로 옮길 수 있습니다. 이렇게 하면 전체 크기가 줄어들지만, 초기 로드 시간에 부정적인 영향을 미칩니다. 사용자가 많은 형제 청크(예: 엔트리 청크의 자식)를 다운로드해야 할 것으로 예상되는 경우 전체 로드 시간이 향상됩니다."),(0,t.yg)("pre",null,(0,t.yg)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.yg)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.yg)("span",{className:"token class-name",parentName:"code"},"webpack",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"optimize",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"CommonsChunkPlugin"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},'// names: ["app", "subPageA"]'),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// (청크를 선택하거나 모든 청크를 생략하세요)"),"\n\n  children",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token boolean",parentName:"code"},"true"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// (선택된 청크의 모든 자식을 선택합니다)"),"\n\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// minChunks: 3,"),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// (모듈을 옮기기 전에 3명의 자식이 공유해야 합니다)"),"\n",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.yg)("h3",null,(0,t.yg)("span",{id:"extra-async-commons-chunk",parentName:"h3"}),"Extra async commons chunk",(0,t.yg)("a",{href:"#extra-async-commons-chunk","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.yg)("span",{className:"header-link",parentName:"a"}))),(0,t.yg)("p",null,"위의 것과 유사하지만 공통 모듈을 부모로 이동하는 대신(초기 로드 시간을 증가시키게 됩니다) 비동기식으로 로드된 새로운 추가 공통 청크가 사용됩니다. 이는 추가 청크가 다운로드되면 자동으로 병렬로 다운로드됩니다."),(0,t.yg)("pre",null,(0,t.yg)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.yg)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.yg)("span",{className:"token class-name",parentName:"code"},"webpack",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"optimize",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"CommonsChunkPlugin"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  name",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token string",parentName:"code"},"'app'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// 또는"),"\n  names",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.yg)("span",{className:"token string",parentName:"code"},"'app'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.yg)("span",{className:"token string",parentName:"code"},"'subPageA'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// 단일 이름 또는 배열 형태의 이름은 비동기 청크를 생성하는"),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// 엔트리 포인트의 이름과 일치해야 합니다."),"\n\n  children",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token boolean",parentName:"code"},"true"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// (청크의 모든 자식을 사용합니다)"),"\n\n  async",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token boolean",parentName:"code"},"true"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// (비동기 공통 청크를 생성합니다)"),"\n\n  minChunks",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token number",parentName:"code"},"3"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// (모듈이 분리되기 전에 3명의 자식이 모듈을 공유해야 합니다)"),"\n",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.yg)("h3",null,(0,t.yg)("span",{id:"passing-the-minchunks-property-a-function",parentName:"h3"}),"Passing the ",(0,t.yg)("inlineCode",{parentName:"h3"},"minChunks")," property a function",(0,t.yg)("a",{href:"#passing-the-minchunks-property-a-function","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.yg)("span",{className:"header-link",parentName:"a"}))),(0,t.yg)("p",null,"또한 ",(0,t.yg)("inlineCode",{parentName:"p"},"minChunks")," 속성에 함수를 전달할 수도 있습니다. 이 함수는 ",(0,t.yg)("inlineCode",{parentName:"p"},"CommonsChunkPlugin"),"에 의해 호출되며 ",(0,t.yg)("inlineCode",{parentName:"p"},"module")," 및 ",(0,t.yg)("inlineCode",{parentName:"p"},"count")," 인수로 함수를 호출합니다."),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"module")," 인수는 ",(0,t.yg)("inlineCode",{parentName:"p"},"name"),"/",(0,t.yg)("inlineCode",{parentName:"p"},"names")," 속성을 통해 제공된 청크의 각 모듈을 나타냅니다.\n",(0,t.yg)("inlineCode",{parentName:"p"},"module"),"은 ",(0,t.yg)("a",{href:"https://github.com/webpack/webpack/blob/main/lib/NormalModule.js",parentName:"p"},"NormalModule"),"의 형태로, 이 사용 사례에 특히 유용한 두 개의 속성이 있습니다."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"module.context"),": 파일을 저장하는 디렉터리입니다. 예: ",(0,t.yg)("inlineCode",{parentName:"li"},"'/my_project/node_modules/example-dependency'")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"module.resource"),": 처리중인 파일의 이름입니다. 예: ",(0,t.yg)("inlineCode",{parentName:"li"},"'/my_project/node_modules/example-dependency/index.js'"))),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"count")," 인수는 ",(0,t.yg)("inlineCode",{parentName:"p"},"module"),"이 사용되는 청크 수를 나타냅니다."),(0,t.yg)("p",null,"이 옵션은 CommonsChunk 알고리즘을 통해 모듈을 이동할 위치를 결정하는 방법을 세밀하게 제어하려는 경우에 유용합니다."),(0,t.yg)("pre",null,(0,t.yg)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.yg)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.yg)("span",{className:"token class-name",parentName:"code"},"webpack",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"optimize",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"CommonsChunkPlugin"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  name",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token string",parentName:"code"},"'my-single-lib-chunk'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  filename",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token string",parentName:"code"},"'my-single-lib-chunk.js'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token function-variable function",parentName:"code"},"minChunks"),(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.yg)("span",{className:"token parameter",parentName:"code"},"module",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},",")," count"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    ",(0,t.yg)("span",{className:"token comment",parentName:"code"},'// 모듈이 경로를 가지고 있고 경로에 "somelib"이 존재하고'),"\n    ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// 3개의 개별 청크/엔트리에서 사용되는 경우"),"\n    ",(0,t.yg)("span",{className:"token comment",parentName:"code"},'// 청크의 키 이름이 "my-single-lib-chunk", 파일 이름이 "my-single-lib-chunk.js"로 분할됩니다.'),"\n    ",(0,t.yg)("span",{className:"token keyword",parentName:"code"},"return")," module",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"."),"resource ",(0,t.yg)("span",{className:"token operator",parentName:"code"},"&&")," ",(0,t.yg)("span",{className:"token regex",parentName:"code"},"/somelib/"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.yg)("span",{className:"token function",parentName:"code"},"test"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"("),"module",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"."),"resource",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.yg)("span",{className:"token operator",parentName:"code"},"&&")," count ",(0,t.yg)("span",{className:"token operator",parentName:"code"},"===")," ",(0,t.yg)("span",{className:"token number",parentName:"code"},"3"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.yg)("p",null,"위에서 볼 수 있듯이 이 예제를 사용하면 함수 내의 모든 조건이 충족되는 경우에만, 하나의 라이브러리를 별도의 파일로 이동할 수 있습니다."),(0,t.yg)("p",null,"이 개념은 암시적 공통 vendor 청크를 얻는데 사용할 수 있습니다."),(0,t.yg)("pre",null,(0,t.yg)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.yg)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.yg)("span",{className:"token class-name",parentName:"code"},"webpack",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"optimize",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"CommonsChunkPlugin"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  name",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token string",parentName:"code"},"'vendor'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token function-variable function",parentName:"code"},"minChunks"),(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.yg)("span",{className:"token parameter",parentName:"code"},"module"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// 이는 vendor의 import가 node_modules 디렉터리에 존재한다고 가정합니다."),"\n    ",(0,t.yg)("span",{className:"token keyword",parentName:"code"},"return")," module",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"."),"context ",(0,t.yg)("span",{className:"token operator",parentName:"code"},"&&")," module",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"."),"context",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.yg)("span",{className:"token function",parentName:"code"},"includes"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.yg)("span",{className:"token string",parentName:"code"},"'node_modules'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.yg)("h2",null,(0,t.yg)("span",{id:"manifest-file",parentName:"h2"}),"Manifest file",(0,t.yg)("a",{href:"#manifest-file","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.yg)("span",{className:"header-link",parentName:"a"}))),(0,t.yg)("p",null,"webpack 부트스트랩 로직을 별도의 파일로 추출하려면 ",(0,t.yg)("inlineCode",{parentName:"p"},"entry"),"로 정의되어 있지 않은 ",(0,t.yg)("inlineCode",{parentName:"p"},"name"),"에 ",(0,t.yg)("inlineCode",{parentName:"p"},"CommonsChunkPlugin"),"을 사용하세요. 자세한 내용은 ",(0,t.yg)("a",{href:"/guides/caching",parentName:"p"},"캐싱 가이드"),"를 참조하세요."),(0,t.yg)("pre",null,(0,t.yg)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.yg)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.yg)("span",{className:"token class-name",parentName:"code"},"webpack",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"optimize",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"CommonsChunkPlugin"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  name",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token string",parentName:"code"},"'manifest'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  minChunks",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token number",parentName:"code"},"Infinity"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.yg)("h2",null,(0,t.yg)("span",{id:"combining-implicit-common-vendor-chunks-and-manifest-file",parentName:"h2"}),"Combining implicit common vendor chunks and manifest file",(0,t.yg)("a",{href:"#combining-implicit-common-vendor-chunks-and-manifest-file","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.yg)("span",{className:"header-link",parentName:"a"}))),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"vendor"),"와 ",(0,t.yg)("inlineCode",{parentName:"p"},"manifest")," 청크는 ",(0,t.yg)("inlineCode",{parentName:"p"},"minChunks"),"에 대해 다른 정의를 사용하므로 플러그인을 두 번 호출해야 합니다."),(0,t.yg)("pre",null,(0,t.yg)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"["),"\n  ",(0,t.yg)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.yg)("span",{className:"token class-name",parentName:"code"},"webpack",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"optimize",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"CommonsChunkPlugin"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    name",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token string",parentName:"code"},"'vendor'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,t.yg)("span",{className:"token function-variable function",parentName:"code"},"minChunks"),(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.yg)("span",{className:"token parameter",parentName:"code"},"module"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      ",(0,t.yg)("span",{className:"token keyword",parentName:"code"},"return")," module",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"."),"context ",(0,t.yg)("span",{className:"token operator",parentName:"code"},"&&")," module",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"."),"context",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.yg)("span",{className:"token function",parentName:"code"},"includes"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.yg)("span",{className:"token string",parentName:"code"},"'node_modules'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},";"),"\n    ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.yg)("span",{className:"token class-name",parentName:"code"},"webpack",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"optimize",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"CommonsChunkPlugin"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    name",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token string",parentName:"code"},"'manifest'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n    minChunks",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token number",parentName:"code"},"Infinity"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.yg)("h2",null,(0,t.yg)("span",{id:"more-examples",parentName:"h2"}),"More Examples",(0,t.yg)("a",{href:"#more-examples","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.yg)("span",{className:"header-link",parentName:"a"}))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{href:"https://github.com/webpack/webpack/tree/master/examples/common-chunk-and-vendor-chunk",parentName:"li"},"공통 및 Vendor 청크")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{href:"https://github.com/webpack/webpack/tree/8b888fedfaeaac6bd39168c0952cc19e6c34280a/examples/multiple-commons-chunks",parentName:"li"},"다중 공통 청크")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{href:"https://github.com/webpack/webpack/tree/8b888fedfaeaac6bd39168c0952cc19e6c34280a/examples/multiple-entry-points-commons-chunk-css-bundle",parentName:"li"},"공통 청크가 있는 다중 엔트리 포인트"))))}p.isMDXComponent=!0,e.default=p}}]);