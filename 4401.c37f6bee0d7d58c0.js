"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4401],{4401:function(a,e,t){t.r(e),t(7378);var n=t(2682);function p(){return p=Object.assign?Object.assign.bind():function(a){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(a[n]=t[n])}return a},p.apply(this,arguments)}function s(a){let{components:e,...t}=a;return(0,n.kt)("wrapper",p({components:e},t),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"output")," 옵션을 설정하여 컴파일된 파일을 디스크에 쓰는 방법을 webpack에 알려줍니다. 여러 ",(0,n.kt)("inlineCode",{parentName:"p"},"진입"),"점이 있을 수 있지만 하나의 ",(0,n.kt)("inlineCode",{parentName:"p"},"출력")," 설정만 지정된다는 점에 주의하세요."),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"usage",parentName:"h2"}),"Usage",(0,n.kt)("a",{href:"#usage","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"webpack 설정의 ",(0,n.kt)("inlineCode",{parentName:"p"},"output")," 프로퍼티는 최소한 객체로 값을 설정해야 하며, 출력 파일에 사용할 ",(0,n.kt)("a",{href:"/configuration/output/#outputfilename",parentName:"p"},(0,n.kt)("inlineCode",{parentName:"a"},"output.filename")),"이 제공되어야 합니다."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-javascript",parentName:"pre"},"module",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  output",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    filename",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'bundle.js'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("p",null,"이 설정은 단일 ",(0,n.kt)("inlineCode",{parentName:"p"},"bundle.js")," 파일을 ",(0,n.kt)("inlineCode",{parentName:"p"},"dist")," 디렉터리에 출력합니다."),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"multiple-entry-points",parentName:"h2"}),"Multiple Entry Points",(0,n.kt)("a",{href:"#multiple-entry-points","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,'설정에서 하나 이상의 "청크"를 생성하면(다중 엔트리 포인트나 CommonsChunkPlugin과 같은 플러그인을 사용하는 경우) ',(0,n.kt)("a",{href:"/configuration/output/#outputfilename",parentName:"p"},"substitution"),"을 사용하여 파일이 고유한 이름을 갖도록 해야 합니다."),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-javascript",parentName:"pre"},"module",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  entry",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    app",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'./src/app.js'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    search",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'./src/search.js'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  output",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    filename",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'[name].js'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    path",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," __dirname ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"+")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'/dist'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n",(0,n.kt)("span",{className:"token comment",parentName:"code"},"// writes to disk: ./dist/app.js, ./dist/search.js"))),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"advanced",parentName:"h2"}),"Advanced",(0,n.kt)("a",{href:"#advanced","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"다음은 애셋에서 CDN과 해시를 사용한 조금 더 복잡한 예제입니다."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"config.js")),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-javascript",parentName:"pre"},"module",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,n.kt)("span",{className:"token comment",parentName:"code"},"//..."),"\n  output",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    path",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'/home/proj/cdn/assets/[fullhash]'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    publicPath",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'https://cdn.example.com/assets/[fullhash]/'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("p",null,"출력 파일의 최종 ",(0,n.kt)("inlineCode",{parentName:"p"},"publicPath"),"를 컴파일 시점에 알 수 없는 경우, 공백으로 남겨두고 런타임에 엔트리 포인트 파일의 ",(0,n.kt)("inlineCode",{parentName:"p"},"__webpack_public_path__"),"를 통해 동적으로 설정할 수 있습니다."),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-javascript",parentName:"pre"},"__webpack_public_path__ ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," myRuntimePublicPath",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n",(0,n.kt)("span",{className:"token comment",parentName:"code"},"// rest of your application entry"))))}s.isMDXComponent=!0,e.default=s}}]);