"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4612],{4612:function(e,a,n){n.r(a),n(7378);var t=n(2682);function p(){return p=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},p.apply(this,arguments)}function o(e){let{components:a,...n}=e;return(0,t.kt)("wrapper",p({components:a},n),(0,t.kt)("p",null,"리졸버는 ",(0,t.kt)("inlineCode",{parentName:"p"},"enhanced-resolve")," 패키지를 사용하여 생성됩니다.\n",(0,t.kt)("inlineCode",{parentName:"p"},"Resolver")," 클래스는 ",(0,t.kt)("inlineCode",{parentName:"p"},"tapable")," 클래스를 확장하고 ",(0,t.kt)("inlineCode",{parentName:"p"},"tapable"),"을 사용하여 몇 가지 hook을 제공합니다.\n",(0,t.kt)("inlineCode",{parentName:"p"},"enhanced-resolve")," 패키지를 사용하여 새 리졸버를 직접 만들 수 있습니다.\n하지만 모든 ",(0,t.kt)("a",{href:"/api/node/#compiler-instance",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"컴파일러")," 인스턴스"),"에는 탭 할 수 있는 몇 가지 리졸버 인스턴스가 있습니다."),(0,t.kt)("p",null,"계속 읽기 전에\n",(0,t.kt)("a",{href:"https://github.com/webpack/enhanced-resolve",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"enhanced-resolve"))," 및 ",(0,t.kt)("a",{href:"/api/plugins/#tapable",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"tapable"))," 문서를 확인하세요."),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"types",parentName:"h2"}),"Types",(0,t.kt)("a",{href:"#types","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"compiler")," 클래스에서 사용할 수 있는 내장 리졸버에는 세 가지 유형이 있습니다."),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"normal"),": 절대 또는 상대 경로를 통해 모듈을 해석합니다."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"context"),": 주어진 컨텍스트 내에서 모듈을 해석합니다."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"loader"),": webpack ",(0,t.kt)("a",{href:"/loaders",parentName:"li"},"로더"),"를 해석합니다.")),(0,t.kt)("p",null,"필요에 따라 ",(0,t.kt)("inlineCode",{parentName:"p"},"컴파일러"),"에서 사용하는 내장 리졸버 중 하나를,\n플러그인을 통해 사용자 지정할 수 있습니다."),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"compiler",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"resolverFactory",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"hooks",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"resolver\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"for"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'[type]'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"tap"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'name'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"resolver"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 이제 resolver.hooks를 활용할 수 있습니다."),"\n    resolver",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"hooks",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"result",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"tap"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'MyPlugin'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"result"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"return")," result",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"여기에서 ",(0,t.kt)("inlineCode",{parentName:"p"},"[type]"),"은 위에서 언급한 세 가지 리졸버 중 하나입니다."),(0,t.kt)("p",null,"hook의 전체 목록과 설명은 ",(0,t.kt)("a",{href:"https://github.com/webpack/enhanced-resolve",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"enhanced-resolve")," 문서"),"를 참고하세요."),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"configuration-options",parentName:"h2"}),"Configuration Options",(0,t.kt)("a",{href:"#configuration-options","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"위에서 언급한 리졸버는 ",(0,t.kt)("a",{href:"/configuration/resolve/",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"resolve"))," 또는 ",(0,t.kt)("a",{href:"/configuration/resolve/#resolveloader",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"resolveLoader"))," 옵션이 있는\n설정 파일을 통해 사용자 지정할 수도 있습니다.\n이러한 옵션을 통해 사용자는 resolve ",(0,t.kt)("inlineCode",{parentName:"p"},"플러그인"),"을 비롯한 다양한 옵션을 통해 해석 동작을 변경할 수 있습니다."),(0,t.kt)("p",null,"예를 들면 ",(0,t.kt)("a",{href:"https://github.com/shaketbaby/directory-named-webpack-plugin",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"DirectoryNamedPlugin")),"과 같은 리졸버 플러그인은 ",(0,t.kt)("a",{href:"/configuration/plugins/#plugins",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"플러그인")," 설정 옵션"),"에서 사용하는 대신 ",(0,t.kt)("inlineCode",{parentName:"p"},"resolve.plugins"),"에 직접 포함될 수 있습니다."),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"tip"),(0,t.kt)("p",{parentName:"aside"},(0,t.kt)("inlineCode",{parentName:"p"},"resolve")," 설정은 ",(0,t.kt)("inlineCode",{parentName:"p"},"normal")," 및 ",(0,t.kt)("inlineCode",{parentName:"p"},"context")," 리졸버에 영향을 미치지만 ",(0,t.kt)("inlineCode",{parentName:"p"},"resolveLoader"),"는 ",(0,t.kt)("inlineCode",{parentName:"p"},"loader")," 리졸버를 수정하는 데 사용됩니다.")))}o.isMDXComponent=!0,a.default=o}}]);