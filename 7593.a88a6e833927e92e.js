"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7593],{7593:function(e,a,n){n.r(a),n(3696);var p=n(1445);function s(){return s=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var p in n)Object.prototype.hasOwnProperty.call(n,p)&&(e[p]=n[p])}return e},s.apply(this,arguments)}function t(e){let{components:a,...n}=e;return(0,p.yg)("wrapper",s({components:a},n),(0,p.yg)("p",null,"이 가이드에서 프로덕션 사이트나 애플리케이션을 구축하기 위한 유틸리티와 좋은 사례들에 대해서 자세히 알아보겠습니다."),(0,p.yg)("aside",{className:"tip"},(0,p.yg)("h6",{className:"tip__prefix",parentName:"aside"},"tip"),(0,p.yg)("p",{parentName:"aside"},"이 연습은 ",(0,p.yg)("a",{href:"/guides/tree-shaking",parentName:"p"},"Tree shaking"),"과 ",(0,p.yg)("a",{href:"/guides/development",parentName:"p"},"Development"),"에서 시작합니다. 계속하기 전에 해당 가이드에 소개된 콘셉트 및 설정을 잘 알고 있어야 합니다.")),(0,p.yg)("h2",null,(0,p.yg)("span",{id:"setup",parentName:"h2"}),"Setup",(0,p.yg)("a",{href:"#setup","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,p.yg)("span",{className:"header-link",parentName:"a"}))),(0,p.yg)("p",null,(0,p.yg)("em",{parentName:"p"},"development와")," ",(0,p.yg)("em",{parentName:"p"},"production의")," 빌드 목표는 매우 다릅니다. ",(0,p.yg)("em",{parentName:"p"},"development")," 에서는 강력한 소스 매핑, localhost 서버에서는 라이브 리로딩이나 hot module replacement 기능을 원합니다. ",(0,p.yg)("em",{parentName:"p"},"production에서의")," 목표는 로드 시간을 줄이기 위해 번들 최소화, 가벼운 소스맵 및 애셋 최적화에 초점을 맞추는 것으로 변경됩니다. 논리적으로 분리를 해야 하면 일반적으로 환경마다 ",(0,p.yg)("strong",{parentName:"p"},"webpack 설정을 분리하여")," 작성하는 것이 좋습니다."),(0,p.yg)("p",null,(0,p.yg)("em",{parentName:"p"},"production과")," ",(0,p.yg)("em",{parentName:"p"},"development에"),' 관련된 부분을 분리하더라도, 중복을 제거하기 위해 "공통"의 설정은 계속 유지해야 합니다. 이러한 설정을 합치기 위해 ',(0,p.yg)("a",{href:"https://github.com/survivejs/webpack-merge",parentName:"p"},(0,p.yg)("inlineCode",{parentName:"a"},"webpack-merge")),' 유틸리티를 사용합니다. "공통"의 설정을 사용하면 환경별 설정에서 코드를 복사하지 않아도 됩니다.'),(0,p.yg)("p",null,(0,p.yg)("inlineCode",{parentName:"p"},"webpack-merge"),"를 설치하고 이전 가이드에서 이미 작업 한 부분을 분리하겠습니다."),(0,p.yg)("pre",null,(0,p.yg)("code",{className:"hljs language-bash",parentName:"pre"},(0,p.yg)("span",{className:"token function",parentName:"code"},"npm")," ",(0,p.yg)("span",{className:"token function",parentName:"code"},"install")," --save-dev webpack-merge")),(0,p.yg)("p",null,(0,p.yg)("strong",{parentName:"p"},"project")),(0,p.yg)("pre",null,(0,p.yg)("code",{className:"hljs language-diff",parentName:"pre"},(0,p.yg)("span",{className:"token unchanged",parentName:"code"},(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"}," webpack-demo\n"),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"}," |- package.json\n"),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"}," |- package-lock.json\n")),(0,p.yg)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,p.yg)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,p.yg)("span",{className:"token line",parentName:"span"}," |- webpack.config.js\n")),(0,p.yg)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"}," |- webpack.common.js\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"}," |- webpack.dev.js\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"}," |- webpack.prod.js\n")),(0,p.yg)("span",{className:"token unchanged",parentName:"code"},(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"}," |- /dist\n"),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"}," |- /src\n"),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},"   |- index.js\n"),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},"   |- math.js\n"),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"}," |- /node_modules")))),(0,p.yg)("p",null,(0,p.yg)("strong",{parentName:"p"},"webpack.common.js")),(0,p.yg)("pre",null,(0,p.yg)("code",{className:"hljs language-diff",parentName:"pre"},(0,p.yg)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"}," const path = require('path');\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"}," const HtmlWebpackPlugin = require('html-webpack-plugin');\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"}," module.exports = {\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"   entry: {\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"     app: './src/index.js',\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"   },\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"   plugins: [\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"     new HtmlWebpackPlugin({\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"       title: 'Production',\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"     }),\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"   ],\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"   output: {\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"     filename: '[name].bundle.js',\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"     path: path.resolve(__dirname, 'dist'),\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"     clean: true,\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"   },\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"}," };")))),(0,p.yg)("p",null,(0,p.yg)("strong",{parentName:"p"},"webpack.dev.js")),(0,p.yg)("pre",null,(0,p.yg)("code",{className:"hljs language-diff",parentName:"pre"},(0,p.yg)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"}," const { merge } = require('webpack-merge');\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"}," const common = require('./webpack.common.js');\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"}," module.exports = merge(common, {\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"   mode: 'development',\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"   devtool: 'inline-source-map',\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"   devServer: {\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"     static: './dist',\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"   },\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"}," });")))),(0,p.yg)("p",null,(0,p.yg)("strong",{parentName:"p"},"webpack.prod.js")),(0,p.yg)("pre",null,(0,p.yg)("code",{className:"hljs language-diff",parentName:"pre"},(0,p.yg)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"}," const { merge } = require('webpack-merge');\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"}," const common = require('./webpack.common.js');\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"}," module.exports = merge(common, {\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"   mode: 'production',\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"}," });")))),(0,p.yg)("p",null,(0,p.yg)("inlineCode",{parentName:"p"},"webpack.common.js"),"에서 ",(0,p.yg)("inlineCode",{parentName:"p"},"entry"),"와 ",(0,p.yg)("inlineCode",{parentName:"p"},"output"),"을 설정했으며, 두 환경에서 필요한 플러그인들을 포함했습니다. ",(0,p.yg)("inlineCode",{parentName:"p"},"webpack.dev.js"),"에서 ",(0,p.yg)("inlineCode",{parentName:"p"},"mode"),"를 ",(0,p.yg)("inlineCode",{parentName:"p"},"development"),"으로 설정했습니다. 또한, 해당 환경에 권장(강력한 소스 매핑)되는 ",(0,p.yg)("inlineCode",{parentName:"p"},"devtool"),"과 간단한 ",(0,p.yg)("inlineCode",{parentName:"p"},"devServer")," 설정을 추가했습니다. 마지막으로 ",(0,p.yg)("inlineCode",{parentName:"p"},"webpack.prod.js"),"에 ",(0,p.yg)("inlineCode",{parentName:"p"},"mode"),"를 ",(0,p.yg)("a",{href:"/guides/tree-shaking/",parentName:"p"},"Tree shaking")," 가이드에서 처음 언급했던 ",(0,p.yg)("a",{href:"/plugins/terser-webpack-plugin/",parentName:"p"},(0,p.yg)("inlineCode",{parentName:"a"},"TerserPlugin")),"을 로드하기 위해 ",(0,p.yg)("inlineCode",{parentName:"p"},"production"),"으로 설정 합니다."),(0,p.yg)("p",null,"환경별 설정에서 ",(0,p.yg)("inlineCode",{parentName:"p"},"merge()"),"를 사용하여 호출하면 ",(0,p.yg)("inlineCode",{parentName:"p"},"webpack.dev.js")," 및 ",(0,p.yg)("inlineCode",{parentName:"p"},"webpack.prod.js"),"에 공통 설정을 포함합니다. ",(0,p.yg)("inlineCode",{parentName:"p"},"webpack-merge")," 툴은 병합을 위한 다양한 고급 기능을 제공하지만, 지금 사례에서는 이런 기능이 필요하지 않습니다."),(0,p.yg)("h2",null,(0,p.yg)("span",{id:"npm-scripts",parentName:"h2"}),"NPM Scripts",(0,p.yg)("a",{href:"#npm-scripts","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,p.yg)("span",{className:"header-link",parentName:"a"}))),(0,p.yg)("p",null,"지금부터 새로운 설정 파일을 사용하기 위해 npm 스크립트를 수정해 보겠습니다. ",(0,p.yg)("inlineCode",{parentName:"p"},"webpack-dev-server"),"를 실행하는 ",(0,p.yg)("inlineCode",{parentName:"p"},"start")," 스크립트의 경우 ",(0,p.yg)("inlineCode",{parentName:"p"},"webpack.dev.js"),"를 사용하고, 프로덕션 빌드를 만들기 위해 ",(0,p.yg)("inlineCode",{parentName:"p"},"webpack"),"을 실행하는 ",(0,p.yg)("inlineCode",{parentName:"p"},"build")," 스크립트의 경우 ",(0,p.yg)("inlineCode",{parentName:"p"},"webpack.prod.js"),"를 사용합니다."),(0,p.yg)("p",null,(0,p.yg)("strong",{parentName:"p"},"package.json")),(0,p.yg)("pre",null,(0,p.yg)("code",{className:"hljs language-diff",parentName:"pre"},(0,p.yg)("span",{className:"token unchanged",parentName:"code"},(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"}," {\n"),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},'   "name": "development",\n'),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},'   "version": "1.0.0",\n'),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},'   "description": "",\n'),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},'   "main": "src/index.js",\n'),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},'   "scripts": {\n')),(0,p.yg)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,p.yg)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,p.yg)("span",{className:"token line",parentName:"span"},'     "start": "webpack serve --open",\n')),(0,p.yg)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},'     "start": "webpack serve --open --config webpack.dev.js",\n')),(0,p.yg)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,p.yg)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,p.yg)("span",{className:"token line",parentName:"span"},'     "build": "webpack"\n')),(0,p.yg)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},'     "build": "webpack --config webpack.prod.js"\n')),(0,p.yg)("span",{className:"token unchanged",parentName:"code"},(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},"   },\n"),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},'   "keywords": [],\n'),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},'   "author": "",\n'),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},'   "license": "ISC",\n'),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},'   "devDependencies": {\n'),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},'     "css-loader": "^0.28.4",\n'),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},'     "csv-loader": "^2.1.1",\n'),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},'     "express": "^4.15.3",\n'),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},'     "file-loader": "^0.11.2",\n'),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},'     "html-webpack-plugin": "^2.29.0",\n'),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},'     "style-loader": "^0.18.2",\n'),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},'     "webpack": "^4.30.0",\n'),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},'     "webpack-dev-middleware": "^1.12.0",\n'),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},'     "webpack-dev-server": "^2.9.1",\n'),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},'     "webpack-merge": "^4.1.0",\n'),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},'     "xml-loader": "^1.2.1"\n'),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},"   }\n"),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"}," }")))),(0,p.yg)("p",null,(0,p.yg)("em",{parentName:"p"},"production")," 설정을 계속 추가하는대로 출력이 어떻게 변경되는지 위 스크립트를 자유롭게 실행하여 확인해보세요."),(0,p.yg)("h2",null,(0,p.yg)("span",{id:"specify-the-mode",parentName:"h2"}),"Specify the Mode",(0,p.yg)("a",{href:"#specify-the-mode","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,p.yg)("span",{className:"header-link",parentName:"a"}))),(0,p.yg)("p",null,"많은 라이브러리는 ",(0,p.yg)("inlineCode",{parentName:"p"},"process.env.NODE_ENV")," 변수를 이용하여 어떤 라이브러리를 포함해야 하는지 결정합니다. 예를 들어 ",(0,p.yg)("inlineCode",{parentName:"p"},"process.env.NODE_ENV"),"가 ",(0,p.yg)("inlineCode",{parentName:"p"},"'production'"),"으로 설정되지 않으면 몇몇 라이브러리는 디버깅의 편의성을 위해 로그 및 테스트를 추가할 수도 있습니다. 그러나 ",(0,p.yg)("inlineCode",{parentName:"p"},"process.env.NODE_ENV"),"가 ",(0,p.yg)("inlineCode",{parentName:"p"},"'production'"),"으로 설정되어 있으면 실제 사용자의 작업 실행 방식을 최적화하기 위해 코드의 중요한 부분을 추가하거나 삭제할 수 있습니다. webpack v4부터 ",(0,p.yg)("a",{href:"/configuration/mode/",parentName:"p"},(0,p.yg)("inlineCode",{parentName:"a"},"mode")),"를 지정하면 ",(0,p.yg)("a",{href:"https://github.com/webpack/webpack/blob/fcccd192ce550210186f84a7ca59ee4cd47a8b2d/lib/WebpackOptionsApply.js#L565",parentName:"p"},(0,p.yg)("inlineCode",{parentName:"a"},"DefinePlugin")),"을 통해 ",(0,p.yg)("inlineCode",{parentName:"p"},"process.env.NODE_ENV"),"가 자동으로 설정됩니다."),(0,p.yg)("p",null,(0,p.yg)("strong",{parentName:"p"},"webpack.prod.js")),(0,p.yg)("pre",null,(0,p.yg)("code",{className:"hljs language-diff",parentName:"pre"},(0,p.yg)("span",{className:"token unchanged",parentName:"code"},(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"}," const { merge } = require('webpack-merge');\n"),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"}," const common = require('./webpack.common.js');\n")),"\n",(0,p.yg)("span",{className:"token unchanged",parentName:"code"},(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"}," module.exports = merge(common, {\n"),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},"   mode: 'production',\n"),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"}," });")))),(0,p.yg)("aside",{className:"tip"},(0,p.yg)("h6",{className:"tip__prefix",parentName:"aside"},"tip"),(0,p.yg)("p",{parentName:"aside"},"기술적으로 ",(0,p.yg)("inlineCode",{parentName:"p"},"NODE_ENV"),"는 Node.js가 실행 중인 스크립트가 참고할 수 있는 시스템 환경 변수입니다. 이것은 서버 툴, 빌드 스크립트 및 클라이언트 라이브러리에 의한 dev-vs-prod의 동작을 결정하는 규칙에 사용됩니다. 예상과 달리 ",(0,p.yg)("inlineCode",{parentName:"p"},"process.env.NODE_ENV"),"는 빌드 스크립트인 ",(0,p.yg)("inlineCode",{parentName:"p"},"webpack.config.js")," ",(0,p.yg)("strong",{parentName:"p"},"안에서")," ",(0,p.yg)("inlineCode",{parentName:"p"},"process.env.NODE_ENV"),"가 자동으로 설정되지 않습니다. 따라서 ",(0,p.yg)("inlineCode",{parentName:"p"},"process.env.NODE_ENV === 'production' ? '[name].[contenthash].bundle.js' : '[name].bundle.js'"),"와 같은 조건은 CLI를 통해 ",(0,p.yg)("inlineCode",{parentName:"p"},"NODE_ENV=production"),"으로 명시적으로 ",(0,p.yg)("inlineCode",{parentName:"p"},"NODE_ENV"),"를 지정하지 않는 한 webpack 설정에서 예상대로 동작하지 않습니다.")),(0,p.yg)("p",null,(0,p.yg)("a",{href:"https://reactjs.org/",parentName:"p"},(0,p.yg)("inlineCode",{parentName:"a"},"react")),"와 같은 라이브러리를 사용한다면 ",(0,p.yg)("inlineCode",{parentName:"p"},"DefinePlugin"),"을 추가한 후에 명확하게 번들 크기가 줄어야 합니다. 또한 로컬 ",(0,p.yg)("inlineCode",{parentName:"p"},"/src"),"의 코드 역시 제어 할 수 있습니다. 따라서 다음 검사는 유효합니다."),(0,p.yg)("p",null,(0,p.yg)("strong",{parentName:"p"},"src/index.js")),(0,p.yg)("pre",null,(0,p.yg)("code",{className:"hljs language-diff",parentName:"pre"},(0,p.yg)("span",{className:"token unchanged",parentName:"code"},(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"}," import { cube } from './math.js';\n")),(0,p.yg)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"}," if (process.env.NODE_ENV !== 'production') {\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"   console.log('Looks like we are in development mode!');\n"),(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"}," }\n")),"\n",(0,p.yg)("span",{className:"token unchanged",parentName:"code"},(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"}," function component() {\n"),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},"   const element = document.createElement('pre');\n")),"\n",(0,p.yg)("span",{className:"token unchanged",parentName:"code"},(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},"   element.innerHTML = [\n"),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},"     'Hello webpack!',\n"),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},"     '5 cubed is equal to ' + cube(5)\n"),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},"   ].join('\\n\\n');\n")),"\n",(0,p.yg)("span",{className:"token unchanged",parentName:"code"},(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},"   return element;\n"),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"}," }\n")),"\n",(0,p.yg)("span",{className:"token unchanged",parentName:"code"},(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"}," document.body.appendChild(component());")))),(0,p.yg)("h2",null,(0,p.yg)("span",{id:"minification",parentName:"h2"}),"Minification",(0,p.yg)("a",{href:"#minification","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,p.yg)("span",{className:"header-link",parentName:"a"}))),(0,p.yg)("p",null,"Webpack v4+의 ",(0,p.yg)("a",{href:"/configuration/mode/#mode-production",parentName:"p"},(0,p.yg)("inlineCode",{parentName:"a"},"production mode")),"에서는 기본으로 코드를 최소화합니다."),(0,p.yg)("p",null,(0,p.yg)("a",{href:"/plugins/terser-webpack-plugin/",parentName:"p"},(0,p.yg)("inlineCode",{parentName:"a"},"TerserPlugin")),"은 최소화를 시작하고 기본으로 사용하기에 좋지만 다른 옵션도 있습니다."),(0,p.yg)("ul",null,(0,p.yg)("li",{parentName:"ul"},(0,p.yg)("a",{href:"https://github.com/webpack-contrib/closure-webpack-plugin",parentName:"li"},(0,p.yg)("inlineCode",{parentName:"a"},"ClosureWebpackPlugin")))),(0,p.yg)("p",null,"만약 다른 최소화 플러그인을 사용하기로 결정했다면, 다른 플러그인이 ",(0,p.yg)("a",{href:"/guides/tree-shaking",parentName:"p"},"Tree shaking")," 가이드에 설명 된 대로 사용하지 않는 코드를 제거하고 ",(0,p.yg)("a",{href:"/configuration/optimization/#optimizationminimizer",parentName:"p"},(0,p.yg)("inlineCode",{parentName:"a"},"optimization.minimizer")),"를 제공하는지 확인해야 합니다."),(0,p.yg)("h2",null,(0,p.yg)("span",{id:"source-mapping",parentName:"h2"}),"Source Mapping",(0,p.yg)("a",{href:"#source-mapping","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,p.yg)("span",{className:"header-link",parentName:"a"}))),(0,p.yg)("p",null,"소스맵은 디버깅뿐만 아니라 벤치마크 테스트에도 유용하므로 프로덕션에도 활성화하는 것이 좋습니다. 즉, 프로덕션용으로 추천되는 빌드 속도가 가장 빠른 것을 선택해야 합니다. (",(0,p.yg)("a",{href:"/configuration/devtool",parentName:"p"},(0,p.yg)("inlineCode",{parentName:"a"},"devtool"))," 참조) 이 가이드에서는 ",(0,p.yg)("em",{parentName:"p"},"development에서")," 사용한 ",(0,p.yg)("inlineCode",{parentName:"p"},"inline-source-map"),"이 아닌 ",(0,p.yg)("em",{parentName:"p"},"production의")," ",(0,p.yg)("inlineCode",{parentName:"p"},"source-map"),"을 사용합니다."),(0,p.yg)("p",null,(0,p.yg)("strong",{parentName:"p"},"webpack.prod.js")),(0,p.yg)("pre",null,(0,p.yg)("code",{className:"hljs language-diff",parentName:"pre"},(0,p.yg)("span",{className:"token unchanged",parentName:"code"},(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"}," const { merge } = require('webpack-merge');\n"),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"}," const common = require('./webpack.common.js');\n")),"\n",(0,p.yg)("span",{className:"token unchanged",parentName:"code"},(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"}," module.exports = merge(common, {\n"),(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"},"   mode: 'production',\n")),(0,p.yg)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,p.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,p.yg)("span",{className:"token line",parentName:"span"},"   devtool: 'source-map',\n")),(0,p.yg)("span",{className:"token unchanged",parentName:"code"},(0,p.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,p.yg)("span",{className:"token line",parentName:"span"}," });")))),(0,p.yg)("aside",{className:"tip"},(0,p.yg)("h6",{className:"tip__prefix",parentName:"aside"},"tip"),(0,p.yg)("p",{parentName:"aside"},"프로덕션에서 ",(0,p.yg)("inlineCode",{parentName:"p"},"inline-***"),"과 ",(0,p.yg)("inlineCode",{parentName:"p"},"eval-***"),"은 번들 크기가 커질 수 있으므로 전체 성능을 향상을 위해 사용하지 않습니다.")),(0,p.yg)("h2",null,(0,p.yg)("span",{id:"minimize-css",parentName:"h2"}),"Minimize CSS",(0,p.yg)("a",{href:"#minimize-css","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,p.yg)("span",{className:"header-link",parentName:"a"}))),(0,p.yg)("p",null,"프로덕션을 위해 CSS를 최소화하는 것이 중요합니다. ",(0,p.yg)("a",{href:"/plugins/mini-css-extract-plugin/#minimizing-for-production",parentName:"p"},"Minimizing for Production"),"을 참고하세요."),(0,p.yg)("h2",null,(0,p.yg)("span",{id:"cli-alternatives",parentName:"h2"}),"CLI Alternatives",(0,p.yg)("a",{href:"#cli-alternatives","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,p.yg)("span",{className:"header-link",parentName:"a"}))),(0,p.yg)("p",null,"위에서 설명한 대부분의 옵션은 커맨드 라인 인자로 설정할 수 있습니다. 예를 들어 ",(0,p.yg)("a",{href:"/configuration/optimization/#optimizationminimize",parentName:"p"},(0,p.yg)("inlineCode",{parentName:"a"},"optimization.minimize은"))," ",(0,p.yg)("inlineCode",{parentName:"p"},"--optimization-minimize"),", 그리고 ",(0,p.yg)("a",{href:"/configuration/mode/",parentName:"p"},(0,p.yg)("inlineCode",{parentName:"a"},"mode는"))," ",(0,p.yg)("inlineCode",{parentName:"p"},"--mode"),"로 설정할 수 있습니다. CLI 인자의 전체 목록을 보려면 ",(0,p.yg)("inlineCode",{parentName:"p"},"npx webpack --help=verbose"),"를 실행하세요."),(0,p.yg)("p",null,"이런 간단한 방식은 편리하지만, 좀 더 알맞은 설정을 위해 webpack 설정 파일에서 이런 옵션을 설정하는 것이 좋습니다."))}t.isMDXComponent=!0,a.default=t}}]);