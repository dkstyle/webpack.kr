"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7959],{7959:function(e,a,n){n.r(a),n(3696);var s=n(1445);function p(){return p=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},p.apply(this,arguments)}function t(e){let{components:a,...n}=e;return(0,s.yg)("wrapper",p({components:a},n),(0,s.yg)("aside",{className:"tip"},(0,s.yg)("h6",{className:"tip__prefix",parentName:"aside"},"tip"),(0,s.yg)("p",{parentName:"aside"},"이 가이드는 ",(0,s.yg)("a",{href:"/guides/output-management",parentName:"p"},"Output Management")," 가이드에 있는 코드 예제에 대해 설명합니다.")),(0,s.yg)("p",null,"프로그레시브 웹 애플리케이션(또는 PWA)은 네이티브 애플리케이션과 유사한 경험을 제공하는 웹 앱입니다. PWA에 기여할 수 있는 많은 것들이 있습니다. 이 중에서 가장 중요한 것은 ",(0,s.yg)("strong",{parentName:"p"},"오프라인")," 일 때 앱이 작동할 수 있는 기능입니다. 이는 ",(0,s.yg)("a",{href:"https://developers.google.com/web/fundamentals/primers/service-workers/",parentName:"p"},"Service Workers"),"라는 웹 기술을 사용하여 이루어집니다."),(0,s.yg)("p",null,"이 섹션에서는 앱에 오프라인 경험을 추가하는 데 중점을 둡니다. 웹 앱에 대한 오프라인 지원을 보다 쉽게 설정하는 데 도움이 될 도구를 제공하는 ",(0,s.yg)("a",{href:"https://github.com/GoogleChrome/workbox",parentName:"p"},"Workbox"),"라는 Google 프로젝트를 사용하여 이 작업을 수행합니다."),(0,s.yg)("h2",null,(0,s.yg)("span",{id:"we-dont-work-offline-now",parentName:"h2"}),"We Don't Work Offline Now",(0,s.yg)("a",{href:"#we-dont-work-offline-now","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.yg)("span",{className:"header-link",parentName:"a"}))),(0,s.yg)("p",null,"지금까지 로컬 파일 시스템으로 직접 이동하여 출력을 확인했습니다. 일반적으로 실제 사용자는 네트워크를 통해 웹 앱에 접근합니다. 브라우저는 ",(0,s.yg)("inlineCode",{parentName:"p"},".html"),", ",(0,s.yg)("inlineCode",{parentName:"p"},".js"),", 그리고 ",(0,s.yg)("inlineCode",{parentName:"p"},".css")," 파일같은 필요한 애셋을 제공할 ",(0,s.yg)("strong",{parentName:"p"},"서버와")," 통신합니다."),(0,s.yg)("p",null,"간단한 서버를 사용하여 테스트해 보겠습니다. ",(0,s.yg)("inlineCode",{parentName:"p"},"npm install http-server --save-dev")," 커맨드로 ",(0,s.yg)("a",{href:"https://www.npmjs.com/package/http-server",parentName:"p"},"http-server")," 패키지를 설치하여 사용해 보겠습니다. 또한 ",(0,s.yg)("inlineCode",{parentName:"p"},"package.json"),"의 ",(0,s.yg)("inlineCode",{parentName:"p"},"scripts")," 섹션을 수정하여 ",(0,s.yg)("inlineCode",{parentName:"p"},"start")," 스크립트를 추가하겠습니다."),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"package.json")),(0,s.yg)("pre",null,(0,s.yg)("code",{className:"hljs language-diff",parentName:"pre"},"{\n",(0,s.yg)("span",{className:"token unchanged",parentName:"code"},(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," ...\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},' "scripts": {\n')),(0,s.yg)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,s.yg)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.yg)("span",{className:"token line",parentName:"span"},'    "build": "webpack"\n')),(0,s.yg)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"},'    "build": "webpack",\n'),(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"},'    "start": "http-server dist"\n')),(0,s.yg)("span",{className:"token unchanged",parentName:"code"},(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," },\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," ...\n")),"}")),(0,s.yg)("p",null,"참고: ",(0,s.yg)("a",{href:"/configuration/dev-server/",parentName:"p"},"webpack DevServer"),"는 기본적으로 인-메모리를 사용합니다. http-server가 ",(0,s.yg)("inlineCode",{parentName:"p"},"./dist")," 디렉터리 파일을 제공하도록 하려면 ",(0,s.yg)("a",{href:"/configuration/dev-server/#devserverdevmiddleware",parentName:"p"},"devserverdevmiddleware.writeToDisk")," 옵션을 활성화해야 합니다."),(0,s.yg)("p",null,(0,s.yg)("inlineCode",{parentName:"p"},"npm run build")," 커맨드를 실행하여 프로젝트를 빌드합니다. 그런 다음 ",(0,s.yg)("inlineCode",{parentName:"p"},"npm start")," 커맨드를 실행합니다. 그러면 다음과 같이 출력됩니다."),(0,s.yg)("pre",null,(0,s.yg)("code",{className:"hljs language-bash",parentName:"pre"},(0,s.yg)("span",{className:"token operator",parentName:"code"},">")," http-server dist\n\nStarting up http-server, serving dist\nAvailable on:\n  http://xx.x.x.x:8080\n  http://127.0.0.1:8080\n  http://xxx.xxx.x.x:8080\nHit CTRL-C to stop the server")),(0,s.yg)("p",null,"만약 브라우저를 ",(0,s.yg)("inlineCode",{parentName:"p"},"http://localhost:8080"),"로 연다면 ",(0,s.yg)("inlineCode",{parentName:"p"},"dist")," 디렉터리에서 제공되는 webpack 애플리케이션을 볼 수 있습니다. 서버를 중지하고 새로 고침하면 webpack 애플리케이션을 더 이상 사용할 수 없습니다."),(0,s.yg)("p",null,"이것이 변경하고자 하는 것입니다. 이 문서의 끝에서는 이제 서버를 중지하고, 새로 고침을 눌러도 애플리케이션을 계속 볼 수 있습니다."),(0,s.yg)("h2",null,(0,s.yg)("span",{id:"adding-workbox",parentName:"h2"}),"Adding Workbox",(0,s.yg)("a",{href:"#adding-workbox","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.yg)("span",{className:"header-link",parentName:"a"}))),(0,s.yg)("p",null,"Workbox webpack 플러그인을 추가하고 ",(0,s.yg)("inlineCode",{parentName:"p"},"webpack.config.js"),"파일을 수정해 보겠습니다."),(0,s.yg)("pre",null,(0,s.yg)("code",{className:"hljs language-bash",parentName:"pre"},(0,s.yg)("span",{className:"token function",parentName:"code"},"npm")," ",(0,s.yg)("span",{className:"token function",parentName:"code"},"install")," workbox-webpack-plugin --save-dev")),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"webpack.config.js")),(0,s.yg)("pre",null,(0,s.yg)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.yg)("span",{className:"token unchanged",parentName:"code"},(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," const path = require('path');\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," const HtmlWebpackPlugin = require('html-webpack-plugin');\n")),(0,s.yg)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"}," const WorkboxPlugin = require('workbox-webpack-plugin');\n")),"\n",(0,s.yg)("span",{className:"token unchanged",parentName:"code"},(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," module.exports = {\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"   entry: {\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"     app: './src/index.js',\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"     print: './src/print.js',\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"   },\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"   plugins: [\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"     new HtmlWebpackPlugin({\n")),(0,s.yg)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,s.yg)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.yg)("span",{className:"token line",parentName:"span"},"       title: 'Output Management',\n")),(0,s.yg)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"},"       title: 'Progressive Web Application',\n")),(0,s.yg)("span",{className:"token unchanged",parentName:"code"},(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"     }),\n")),(0,s.yg)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"},"     new WorkboxPlugin.GenerateSW({\n"),(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"},"       // 이 옵션은 ServiceWorkers가 빠르게 도달하도록 장려합니다\n"),(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"},'       // 그리고 "오래된" SW가 돌아다니는 것을 허용하지 않습니다\n'),(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"},"       clientsClaim: true,\n"),(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"},"       skipWaiting: true,\n"),(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"},"     }),\n")),(0,s.yg)("span",{className:"token unchanged",parentName:"code"},(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"   ],\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"   output: {\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"     filename: '[name].bundle.js',\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"     path: path.resolve(__dirname, 'dist'),\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"     clean: true,\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"   },\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," };")))),(0,s.yg)("p",null,"이제 ",(0,s.yg)("inlineCode",{parentName:"p"},"npm run build"),"를 수행할 때 어떤 일이 발생하는지 살펴보겠습니다."),(0,s.yg)("pre",null,(0,s.yg)("code",{className:"hljs language-bash",parentName:"pre"},(0,s.yg)("span",{className:"token punctuation",parentName:"code"},".."),".\n                  Asset       Size  Chunks                    Chunk Names\n          app.bundle.js     ",(0,s.yg)("span",{className:"token number",parentName:"code"},"545")," kB    ",(0,s.yg)("span",{className:"token number",parentName:"code"},"0"),", ",(0,s.yg)("span",{className:"token number",parentName:"code"},"1"),"  ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"["),"emitted",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"]"),"  ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"["),"big",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"]"),"  app\n        print.bundle.js    ",(0,s.yg)("span",{className:"token number",parentName:"code"},"2.74")," kB       ",(0,s.yg)("span",{className:"token number",parentName:"code"},"1"),"  ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"["),"emitted",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"]"),"         print\n             index.html  ",(0,s.yg)("span",{className:"token number",parentName:"code"},"254")," bytes          ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"["),"emitted",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"]"),"\nprecache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js  ",(0,s.yg)("span",{className:"token number",parentName:"code"},"268")," bytes          ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"["),"emitted",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"]"),"\n      service-worker.js       ",(0,s.yg)("span",{className:"token number",parentName:"code"},"1")," kB          ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"["),"emitted",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"]"),"\n",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},".."),".")),(0,s.yg)("p",null,"보다시피 ",(0,s.yg)("inlineCode",{parentName:"p"},"service-worker.js"),"와 ",(0,s.yg)("inlineCode",{parentName:"p"},"precache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js"),"라는 2개의 추가 파일이 생성됩니다. ",(0,s.yg)("inlineCode",{parentName:"p"},"service-worker.js"),"는 서비스 워커 파일이고 ",(0,s.yg)("inlineCode",{parentName:"p"},"precache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js"),"는 ",(0,s.yg)("inlineCode",{parentName:"p"},"service-worker.js"),"가 실행되기 위해 필요한 파일입니다. 사용자가 생성한 파일은 다를 수 있습니다. 하지만 ",(0,s.yg)("inlineCode",{parentName:"p"},"service-worker.js")," 파일은 있어야 합니다."),(0,s.yg)("p",null,"이제 서비스 워커를 만들었습니다. 다음 단계는 무엇일까요?"),(0,s.yg)("h2",null,(0,s.yg)("span",{id:"registering-our-service-worker",parentName:"h2"}),"Registering Our Service Worker",(0,s.yg)("a",{href:"#registering-our-service-worker","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.yg)("span",{className:"header-link",parentName:"a"}))),(0,s.yg)("p",null,"서비스 워커를 등록하여 실행 할 수 있도록 합시다. 아래의 등록 코드를 추가하면 됩니다."),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"index.js")),(0,s.yg)("pre",null,(0,s.yg)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.yg)("span",{className:"token unchanged",parentName:"code"},(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," import _ from 'lodash';\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," import printMe from './print.js';\n")),"\n",(0,s.yg)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"}," if ('serviceWorker' in navigator) {\n"),(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"},"   window.addEventListener('load', () => {\n"),(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"},"     navigator.serviceWorker.register('/service-worker.js').then(registration => {\n"),(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"},"       console.log('SW registered: ', registration);\n"),(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"},"     }).catch(registrationError => {\n"),(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"},"       console.log('SW registration failed: ', registrationError);\n"),(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"},"     });\n"),(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"},"   });\n"),(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"}," }")))),(0,s.yg)("p",null,"한 번 더 ",(0,s.yg)("inlineCode",{parentName:"p"},"npm run build"),"를 통해 등록 코드를 포함한 앱 버전을 빌드합니다. 그런 다음 ",(0,s.yg)("inlineCode",{parentName:"p"},"npm start"),"를 실행합니다. ",(0,s.yg)("inlineCode",{parentName:"p"},"http://localhost:8080"),"로 이동하여 콘솔을 살펴보세요. 어딘가에 다음 내용이 표시됩니다."),(0,s.yg)("pre",null,(0,s.yg)("code",{className:"hljs language-bash",parentName:"pre"},"SW registered")),(0,s.yg)("p",null,"이제 테스트해 보겠습니다. 서버를 중지하고 페이지를 새로 고침 합니다. 브라우저가 서비스 워커를 지원하는 경우 애플리케이션을 계속해서 확인할 수 있습니다. 하지만 서비스 워커가 서비스를 제공하는 것이지 서버가 ",(0,s.yg)("strong",{parentName:"p"},"제공하는 것은 아닙니다.")),(0,s.yg)("h2",null,(0,s.yg)("span",{id:"conclusion",parentName:"h2"}),"Conclusion",(0,s.yg)("a",{href:"#conclusion","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.yg)("span",{className:"header-link",parentName:"a"}))),(0,s.yg)("p",null,"Workbox 프로젝트를 사용하여 오프라인 앱을 빌드했습니다. 웹 앱을 PWA로 전환하는 여정을 시작했습니다. 이제 더 나아가는 것에 대해 생각할 수 있습니다. 도움이 되는 유용한 리소스는 ",(0,s.yg)("a",{href:"https://web.dev/progressive-web-apps/",parentName:"p"},"여기"),"에서 찾을 수 있습니다."))}t.isMDXComponent=!0,a.default=t}}]);