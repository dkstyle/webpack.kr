"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6289],{6289:function(e,a,n){n.r(a),n(3696);var r=n(1445);function t(){return t=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},t.apply(this,arguments)}function s(e){let{components:a,...n}=e;return(0,r.yg)("wrapper",t({components:a},n),(0,r.yg)("p",null,"리졸버는 절대 경로로 모듈을 찾는 데 도움이 되는 라이브러리입니다.\n모듈은 다음과 같이 다른 모듈의 의존성으로서 필요할 수 있습니다."),(0,r.yg)("pre",null,(0,r.yg)("code",{className:"hljs language-js",parentName:"pre"},(0,r.yg)("span",{className:"token keyword",parentName:"code"},"import")," foo ",(0,r.yg)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,r.yg)("span",{className:"token string",parentName:"code"},"'path/to/module'"),(0,r.yg)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,r.yg)("span",{className:"token comment",parentName:"code"},"// 또는"),"\n",(0,r.yg)("span",{className:"token function",parentName:"code"},"require"),(0,r.yg)("span",{className:"token punctuation",parentName:"code"},"("),(0,r.yg)("span",{className:"token string",parentName:"code"},"'path/to/module'"),(0,r.yg)("span",{className:"token punctuation",parentName:"code"},")"),(0,r.yg)("span",{className:"token punctuation",parentName:"code"},";"))),(0,r.yg)("p",null,"의존성 모듈은 애플리케이션 코드 또는 써드 파티 라이브러리에서 가져올 수 있습니다.\n리졸버는 webpack이 모든 ",(0,r.yg)("inlineCode",{parentName:"p"},"require"),"/",(0,r.yg)("inlineCode",{parentName:"p"},"import")," 문에 대해 번들에 포함되어야 하는 모듈의 코드를 찾는 데 도움을 줍니다.\nwebpack은 모듈을 번들링하는 동안 파일 경로를 확인하기 위해 ",(0,r.yg)("a",{href:"https://github.com/webpack/enhanced-resolve",parentName:"p"},"enhanced-resolve"),"를 사용합니다."),(0,r.yg)("h2",null,(0,r.yg)("span",{id:"resolving-rules-in-webpack",parentName:"h2"}),"Resolving rules in webpack",(0,r.yg)("a",{href:"#resolving-rules-in-webpack","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,r.yg)("span",{className:"header-link",parentName:"a"}))),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"enhanced-resolve"),"를 사용하여 webpack은 세 가지 종류의 파일 경로를 확인할 수 있습니다."),(0,r.yg)("h3",null,(0,r.yg)("span",{id:"absolute-paths",parentName:"h3"}),"Absolute paths",(0,r.yg)("a",{href:"#absolute-paths","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,r.yg)("span",{className:"header-link",parentName:"a"}))),(0,r.yg)("pre",null,(0,r.yg)("code",{className:"hljs language-js",parentName:"pre"},(0,r.yg)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,r.yg)("span",{className:"token string",parentName:"code"},"'/home/me/file'"),(0,r.yg)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n",(0,r.yg)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,r.yg)("span",{className:"token string",parentName:"code"},"'C:\\\\Users\\\\me\\\\file'"),(0,r.yg)("span",{className:"token punctuation",parentName:"code"},";"))),(0,r.yg)("p",null,"이미 파일에 대한 절대 경로가 있으므로 추가 분석이 필요하지 않습니다."),(0,r.yg)("h3",null,(0,r.yg)("span",{id:"relative-paths",parentName:"h3"}),"Relative paths",(0,r.yg)("a",{href:"#relative-paths","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,r.yg)("span",{className:"header-link",parentName:"a"}))),(0,r.yg)("pre",null,(0,r.yg)("code",{className:"hljs language-js",parentName:"pre"},(0,r.yg)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,r.yg)("span",{className:"token string",parentName:"code"},"'../src/file1'"),(0,r.yg)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,r.yg)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,r.yg)("span",{className:"token string",parentName:"code"},"'./file2'"),(0,r.yg)("span",{className:"token punctuation",parentName:"code"},";"))),(0,r.yg)("p",null,"이 경우 ",(0,r.yg)("inlineCode",{parentName:"p"},"import")," 또는 ",(0,r.yg)("inlineCode",{parentName:"p"},"require"),"가 발생하는 소스 파일의 디렉터리를 컨텍스트 디렉터리로 간주합니다. ",(0,r.yg)("inlineCode",{parentName:"p"},"import/require"),"에 지정된 상대 경로는 이 컨텍스트 경로에 결합되어 모듈에 대한 절대 경로를 생성합니다."),(0,r.yg)("h3",null,(0,r.yg)("span",{id:"module-paths",parentName:"h3"}),"Module paths",(0,r.yg)("a",{href:"#module-paths","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,r.yg)("span",{className:"header-link",parentName:"a"}))),(0,r.yg)("pre",null,(0,r.yg)("code",{className:"hljs language-js",parentName:"pre"},(0,r.yg)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,r.yg)("span",{className:"token string",parentName:"code"},"'module'"),(0,r.yg)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,r.yg)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,r.yg)("span",{className:"token string",parentName:"code"},"'module/lib/file'"),(0,r.yg)("span",{className:"token punctuation",parentName:"code"},";"))),(0,r.yg)("p",null,"모듈은 ",(0,r.yg)("a",{href:"/configuration/resolve/#resolvemodules",parentName:"p"},(0,r.yg)("inlineCode",{parentName:"a"},"resolve.modules")),"에 지정된 모든 디렉터리 내에서 검색됩니다.\n",(0,r.yg)("a",{href:"/configuration/resolve/#resolvealias",parentName:"p"},(0,r.yg)("inlineCode",{parentName:"a"},"resolve.alias"))," 구성 옵션을 사용하여 별칭을 만들어 원래 모듈 경로를 대체 경로로 바꿀 수 있습니다."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"패키지에 ",(0,r.yg)("inlineCode",{parentName:"li"},"package.json"),"파일이 포함된 경우 ",(0,r.yg)("a",{href:"/configuration/resolve/#resolveexportsfields",parentName:"li"},(0,r.yg)("inlineCode",{parentName:"a"},"resolve.exportsFields"))," 구성 옵션에 지정된 필드를 순서대로 조회하고 ",(0,r.yg)("inlineCode",{parentName:"li"},"package.json"),"의 첫 번째 필드는 ",(0,r.yg)("a",{href:"/guides/package-exports/",parentName:"li"},"패키지 내보내기 가이드라인"),"에 따라 패키지에서 사용 가능한 내보내기를 결정합니다.")),(0,r.yg)("p",null,"위의 규칙에 따라 경로가 확인되면 리졸버는 경로가 파일 또는 디렉터리를 가리키는지 확인합니다. 경로가 파일을 가리키는 경우 다음 단계를 수행합니다."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"경로에 파일 확장자가 있으면 파일이 바로 번들로 제공됩니다."),(0,r.yg)("li",{parentName:"ul"},"그렇지 않으면 파일 확장자는 ",(0,r.yg)("a",{href:"/configuration/resolve/#resolveextensions",parentName:"li"},(0,r.yg)("inlineCode",{parentName:"a"},"resolve.extensions"))," 옵션을 사용하여 확인됩니다. 예시: ",(0,r.yg)("inlineCode",{parentName:"li"},".js"),", ",(0,r.yg)("inlineCode",{parentName:"li"},".jsx"),".")),(0,r.yg)("p",null,"경로가 폴더를 가리키는 경우 올바른 확장자를 가진 올바른 파일을 찾기 위해 다음 단계를 수행합니다."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"폴더에 ",(0,r.yg)("inlineCode",{parentName:"li"},"package.json")," 파일이 포함되어 있으면 ",(0,r.yg)("a",{href:"/configuration/resolve/#resolvemainfields",parentName:"li"},(0,r.yg)("inlineCode",{parentName:"a"},"resolve.mainFields"))," 구성 옵션에 지정된 필드가 순서대로 조회되고 ",(0,r.yg)("inlineCode",{parentName:"li"},"package.json"),"의 첫 번째 필드가 파일 경로를 결정합니다."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"package.json"),"이 없거나 ",(0,r.yg)("a",{href:"/configuration/resolve/#resolvemainfields",parentName:"li"},(0,r.yg)("inlineCode",{parentName:"a"},"resolve.mainFields")),"가 유효한 경로를 반환하지 않는 경우 ",(0,r.yg)("a",{href:"/configuration/resolve/#resolvemainfields",parentName:"li"},(0,r.yg)("inlineCode",{parentName:"a"},"resolve.mainFields"))," 구성 옵션에 지정된 파일 이름을 순서대로 검색하여 imported/required 된 디렉터리에 일치하는 파일 이름이 있는지 확인합니다."),(0,r.yg)("li",{parentName:"ul"},"그런 다음 ",(0,r.yg)("a",{href:"/configuration/resolve/#resolveextensions",parentName:"li"},(0,r.yg)("inlineCode",{parentName:"a"},"resolve.extensions"))," 옵션을 사용하여 비슷한 방식으로 파일 확장자를 확인합니다.")),(0,r.yg)("p",null,"Webpack은 빌드 대상에 따라 이러한 옵션에 대해 합리적인 ",(0,r.yg)("a",{href:"/configuration/resolve",parentName:"p"},"기본값"),"을 제공합니다."),(0,r.yg)("h2",null,(0,r.yg)("span",{id:"resolving-loaders",parentName:"h2"}),"Resolving Loaders",(0,r.yg)("a",{href:"#resolving-loaders","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,r.yg)("span",{className:"header-link",parentName:"a"}))),(0,r.yg)("p",null,"파일 분석에 명시된 것과 동일한 규칙을 따릅니다. 그러나 ",(0,r.yg)("a",{href:"/configuration/resolve/#resolveloader",parentName:"p"},(0,r.yg)("inlineCode",{parentName:"a"},"resolveLoader"))," 구성 옵션을 사용하여 로더에 대한 별도의 분석 규칙을 가질 수 있습니다."),(0,r.yg)("h2",null,(0,r.yg)("span",{id:"caching",parentName:"h2"}),"Caching",(0,r.yg)("a",{href:"#caching","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,r.yg)("span",{className:"header-link",parentName:"a"}))),(0,r.yg)("p",null,"모든 파일 시스템 액세스가 캐시되므로 동일한 파일에 대한 여러 병렬 또는 직렬 요청이 더 빠르게 발생합니다. ",(0,r.yg)("a",{href:"/configuration/watch/#watch",parentName:"p"},"watch 모드"),"에서는 수정된 파일만 캐시에서 제거됩니다. watch 모드가 꺼져 있으면 모든 컴파일 전에 캐시가 제거됩니다."),(0,r.yg)("p",null,"위에서 언급한 구성 옵션에 대한 자세한 내용은 ",(0,r.yg)("a",{href:"/configuration/resolve",parentName:"p"},"Resolve API"),"를 참고하세요."))}s.isMDXComponent=!0,a.default=s}}]);