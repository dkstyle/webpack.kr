"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2437],{2437:function(e,a,t){t.r(a),t(7378);var n=t(2682);function p(){return p=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},p.apply(this,arguments)}function o(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",p({components:a},t),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"이 섹션은 webpack의 내부 요소를 설명하며 플러그인 개발자에게 유용할 수 있습니다.")),(0,n.kt)("p",null,"번들링은 일부 파일을 가져오고 다른 파일은 내보내는 기능입니다."),(0,n.kt)("p",null,"그러나 입력과 출력 사이에는 ",(0,n.kt)("a",{href:"/concepts/modules/",parentName:"p"},"모듈"),", ",(0,n.kt)("a",{href:"/concepts/entry-points/",parentName:"p"},"엔트리 포인트"),", 청크, 청크 그룹, 그 외 많은 중간 요소들이 있습니다."),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"the-main-parts",parentName:"h2"}),"The main parts",(0,n.kt)("a",{href:"#the-main-parts","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"프로젝트에서 사용하는 모든 파일은 ",(0,n.kt)("a",{href:"/concepts/modules/",parentName:"p"},"모듈"),"입니다."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"./index.js")),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,n.kt)("span",{className:"token keyword",parentName:"code"},"import")," app ",(0,n.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'./app.js'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"./app.js")),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,n.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,n.kt)("span",{className:"token keyword",parentName:"code"},"default")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'the app'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("p",null,"모듈은 서로를 사용하여 그래프(",(0,n.kt)("inlineCode",{parentName:"p"},"ModuleGraph"),")를 형성합니다."),(0,n.kt)("p",null,"번들링 과정 중에 모듈은 청크로 결합됩니다.\n청크는 청크 그룹으로 합쳐지고, 모듈을 통해 서로 연결된 그래프(",(0,n.kt)("inlineCode",{parentName:"p"},"ChunkGraph"),")를 형성합니다.\n내부적으로 엔트리 포인트를 설명할 때는 하나의 청크로 청크 그룹을 만드는 것을 말합니다."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"./webpack.config.js")),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  entry",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'./index.js'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"main"),"이라는 이름으로 하나의 청크 그룹이 생성됩니다. (",(0,n.kt)("inlineCode",{parentName:"p"},"main"),"은 엔트리 포인트의 기본 이름입니다.)\n이 청크 그룹에는",(0,n.kt)("inlineCode",{parentName:"p"},"./index.js")," 모듈이 포함되어 있습니다. 파서가 ",(0,n.kt)("inlineCode",{parentName:"p"},"./index.js")," 내부의 import 문을 처리하면서 새 모듈이 이 청크에 추가됩니다."),(0,n.kt)("p",null,"다른 예제를 확인해보세요."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"./webpack.config.js")),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  entry",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    home",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'./home.js'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    about",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'./about.js'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("p",null,"이름이 ",(0,n.kt)("inlineCode",{parentName:"p"},"home"),"과 ",(0,n.kt)("inlineCode",{parentName:"p"},"about"),"인 두 개의 청크 그룹이 생성됩니다.\n각각의 청크 그룹은 모듈이 있는 청크를 가지고 있습니다. ",(0,n.kt)("inlineCode",{parentName:"p"},"home")," 은 ",(0,n.kt)("inlineCode",{parentName:"p"},"./home.js"),"를, ",(0,n.kt)("inlineCode",{parentName:"p"},"about")," 은 ",(0,n.kt)("inlineCode",{parentName:"p"},"./about.js")," 청크를 가지고 있습니다."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"청크 그룹에는 하나 이상의 청크가 있을 수 있습니다. 예를 들어 ",(0,n.kt)("a",{href:"/plugins/split-chunks-plugin/",parentName:"p"},"SplitChunksPlugin"),"은 청크를 하나 또는 그 이상의 청크로 분할합니다.")),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"chunks",parentName:"h2"}),"Chunks",(0,n.kt)("a",{href:"#chunks","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"청크는 두 가지 형태로 제공됩니다."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"초기 청크"),"는 엔트리 포인트의 메인 청크입니다. 이 청크는 엔트리 포인트에서 명시된 모든 모듈과 의존성을 포함합니다."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"비초기 청크"),"는 지연 로드될 수 있는 청크입니다. ",(0,n.kt)("a",{href:"/guides/code-splitting/#dynamic-imports",parentName:"li"},"동적 import")," 또는 ",(0,n.kt)("a",{href:"/plugins/split-chunks-plugin/",parentName:"li"},"SplitChunksPlugin")," 사용 중에 나타날 수 있습니다.")),(0,n.kt)("p",null,"각 청크에는 해당하는 ",(0,n.kt)("strong",{parentName:"p"},"애셋이")," 있습니다. 애셋은 번들링의 결과로 출력된 파일입니다."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  entry",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'./src/index.jsx'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"./src/index.jsx")),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,n.kt)("span",{className:"token keyword",parentName:"code"},"import")," React ",(0,n.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'react'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,n.kt)("span",{className:"token keyword",parentName:"code"},"import")," ReactDOM ",(0,n.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'react-dom'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n",(0,n.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token string",parentName:"code"},"'./app.jsx'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,n.kt)("span",{className:"token function",parentName:"code"},"then"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token parameter",parentName:"code"},"App"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ReactDOM",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,n.kt)("span",{className:"token function",parentName:"code"},"render"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token operator",parentName:"code"},"<"),"App ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"/"),(0,n.kt)("span",{className:"token operator",parentName:"code"},">"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},",")," root",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("p",null,"이름이 ",(0,n.kt)("inlineCode",{parentName:"p"},"main"),"인 초기 청크가 생성되며, 이 청크는 다음을 포함합니다."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"./src/index.jsx")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"react")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"react-dom"))),(0,n.kt)("p",null,"그리고 ",(0,n.kt)("inlineCode",{parentName:"p"},"./app.jsx")," 를 제외한 모든 의존성도 포함합니다."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"./app.jsx")," 모듈은 동적으로 가져오므로 비초기 청크가 생성됩니다."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"결과:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"/dist/main.js")," - ",(0,n.kt)("inlineCode",{parentName:"li"},"초기")," 청크"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"/dist/394.js")," - ",(0,n.kt)("inlineCode",{parentName:"li"},"비초기")," 청크")),(0,n.kt)("p",null,"기본적으로 ",(0,n.kt)("inlineCode",{parentName:"p"},"비초기")," 청크에는 이름이 없으므로 이름 대신 고유한 ID가 사용됩니다.\n동적으로 가져올 때 ",(0,n.kt)("a",{href:"/api/module-methods/#magic-comments",parentName:"p"},'"특별한" 주석'),"을 사용하여 청크 이름을 구체적으로 지정할 수 있습니다."),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,n.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),"\n  ",(0,n.kt)("span",{className:"token comment",parentName:"code"},'/* webpackChunkName: "app" */'),"\n  ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'./app.jsx'"),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,n.kt)("span",{className:"token function",parentName:"code"},"then"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token parameter",parentName:"code"},"App"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ReactDOM",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,n.kt)("span",{className:"token function",parentName:"code"},"render"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token operator",parentName:"code"},"<"),"App ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"/"),(0,n.kt)("span",{className:"token operator",parentName:"code"},">"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},",")," root",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"결과:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"/dist/main.js")," - ",(0,n.kt)("inlineCode",{parentName:"li"},"초기")," 청크"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"/dist/app.js")," - ",(0,n.kt)("inlineCode",{parentName:"li"},"비초기")," 청크")),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"output",parentName:"h2"}),"Output",(0,n.kt)("a",{href:"#output","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"출력 파일의 이름은 설정의 두 필드에 영향을 받습니다."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{href:"/configuration/output/#outputfilename",parentName:"li"},(0,n.kt)("inlineCode",{parentName:"a"},"output.filename"))," - ",(0,n.kt)("inlineCode",{parentName:"li"},"초기")," 청크 파일에서 사용합니다."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{href:"/configuration/output/#outputchunkfilename",parentName:"li"},(0,n.kt)("inlineCode",{parentName:"a"},"output.chunkFilename"))," - ",(0,n.kt)("inlineCode",{parentName:"li"},"비초기")," 청크 파일에서 사용합니다."),(0,n.kt)("li",{parentName:"ul"},"경우에 따라서 청크를 ",(0,n.kt)("inlineCode",{parentName:"li"},"초기"),"와 ",(0,n.kt)("inlineCode",{parentName:"li"},"비초기"),"로 사용합니다. 이 때는 ",(0,n.kt)("inlineCode",{parentName:"li"},"output.filename"),"을 사용합니다.")),(0,n.kt)("p",null,"이 필드에는 ",(0,n.kt)("a",{href:"/configuration/output/#template-strings",parentName:"p"},"몇 개의 플레이스 홀더"),"를 제공합니다. 가장 자주 사용하는 것은 아래와 같습니다."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"[id]")," - 청크 ID (예: ",(0,n.kt)("inlineCode",{parentName:"li"},"[id].js")," -> ",(0,n.kt)("inlineCode",{parentName:"li"},"485.js"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"[name]")," - 청크 이름 (예: ",(0,n.kt)("inlineCode",{parentName:"li"},"[name].js")," -> ",(0,n.kt)("inlineCode",{parentName:"li"},"app.js"),"). 청크에 이름이 없는 경우 ID가 사용됩니다."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"[contenthash]")," - 출력 파일 콘텐츠의 md4-hash (예: ",(0,n.kt)("inlineCode",{parentName:"li"},"[contenthash].js")," -> ",(0,n.kt)("inlineCode",{parentName:"li"},"4ea6ff1de66c537eb9b2.js"),")")))}o.isMDXComponent=!0,a.default=o}}]);