"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8937],{8937:function(e,a,n){n.r(a),n(7378);var s=n(2682);function t(){return t=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},t.apply(this,arguments)}function p(e){let{components:a,...n}=e;return(0,s.kt)("wrapper",t({components:a},n),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"webpack")," 컴파일러는 ES2015 모듈, CommonJS 또는 AMD로 작성된 모듈을 이해할 수 있습니다. 그러나 일부 써드 파티 라이브러리는 전역 종속성을 필요로 할 수 있습니다. (예: ",(0,s.kt)("inlineCode",{parentName:"p"},"jQuery"),"의 경우 ",(0,s.kt)("inlineCode",{parentName:"p"},"$"),') 라이브러리는 내보낼 필요가 있는 전역 변수를 만들 수도 있습니다. 이러한 "깨진 모듈은" ',(0,s.kt)("em",{parentName:"p"},"shimming이")," 작동하는 하나의 인스턴스입니다."),(0,s.kt)("aside",{className:"warning"},(0,s.kt)("h6",{className:"warning__prefix",parentName:"aside"},"warning"),(0,s.kt)("p",{parentName:"aside"},(0,s.kt)("strong",{parentName:"p"},"전역 변수를 사용하지 않는 것이 좋습니다!")," webpack의 전체 개념은 더 많은 모듈식 프런트엔드 개발을 허용하는 것입니다. 이는 응집도가 높고 숨겨진 종속성(예: 전역 변수)에 의존하지 않는 격리 된 모듈을 작성하는 것을 의미합니다. 그러므로 필요한 경우에만 이 기능을 사용하세요.")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"shimming")," 이 유용한 또 다른 경우는 더 많은 사용자를 지원하기 위해 브라우저 기능을 ",(0,s.kt)("a",{href:"https://en.wikipedia.org/wiki/Polyfill_%28programming%29",parentName:"p"},"폴리필"),"하려는 경우입니다. 이 경우 패치가 필요한 브라우저에만 해당 폴리필을 제공할 수 있습니다. (예: 요청 시 로드)"),(0,s.kt)("p",null,"해당 글에서는 이러한 두 가지 사용 사례를 모두 살펴봅니다."),(0,s.kt)("aside",{className:"tip"},(0,s.kt)("h6",{className:"tip__prefix",parentName:"aside"},"tip"),(0,s.kt)("p",{parentName:"aside"},"간단하게 시작하기 위해 이 가이드는 ",(0,s.kt)("a",{href:"/guides/getting-started",parentName:"p"},"시작하기"),"의 예에서 시작합니다. 계속해서 진행하기에 앞서 설정에 익숙해져야 합니다.")),(0,s.kt)("h2",null,(0,s.kt)("span",{id:"shimming-globals",parentName:"h2"}),"Shimming Globals",(0,s.kt)("a",{href:"#shimming-globals","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.kt)("span",{className:"header-link",parentName:"a"}))),(0,s.kt)("p",null,"전역 변수 shimming의 첫 번째 사용 사례부터 시작하겠습니다. 시작하기 전에 프로젝트를 다시 한번 살펴보겠습니다."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"프로젝트")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},"webpack-demo\n|- package.json\n|- package-lock.json\n|- webpack.config.js\n|- /dist\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- index.html\n")),"|- /src\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- index.js\n")),"|- /node_modules")),(0,s.kt)("p",null,"우리가 사용했던 ",(0,s.kt)("inlineCode",{parentName:"p"},"lodash")," 패키지를 기억하시나요? 데모 목적으로 애플리케이션에서 전역적으로 제공하고 싶다고 가정해 보겠습니다. 이를 위해 ",(0,s.kt)("inlineCode",{parentName:"p"},"ProvidePlugin"),"을 사용할 수 있습니다."),(0,s.kt)("p",null,(0,s.kt)("a",{href:"/plugins/provide-plugin",parentName:"p"},(0,s.kt)("inlineCode",{parentName:"a"},"ProvidePlugin")),"은 webpack을 통해 컴파일된 모든 모듈에서 패키지를 변수로 사용할 수 있게 해줍니다. 변수가 사용되는 것을 webpack에서 확인하면 최종 번들에 주어진 패키지를 포함합니다. ",(0,s.kt)("inlineCode",{parentName:"p"},"lodash"),"에 대한 ",(0,s.kt)("inlineCode",{parentName:"p"},"import"),"문을 제거하고 플러그인을 통해 제공해보겠습니다."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"src/index.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,s.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.kt)("span",{className:"token line",parentName:"span"},"import _ from 'lodash';\n"),(0,s.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.kt)("span",{className:"token line",parentName:"span"},"\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"function component() {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  const element = document.createElement('div');\n")),"\n",(0,s.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,s.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  // 이제 이 스크립트로 Lodash를 가져옵니다.\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  return element;\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"}\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"document.body.appendChild(component());")))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"const path = require('path');\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"const webpack = require('webpack');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"module.exports = {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  entry: './src/index.js',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  output: {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    filename: 'main.js',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    path: path.resolve(__dirname, 'dist'),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  },\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  plugins: [\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    new webpack.ProvidePlugin({\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"      _: 'lodash',\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    }),\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  ],\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"};")))),(0,s.kt)("p",null,"여기서 우리가 실질적으로 한 것은 webpack에게 알려주는 것입니다."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"변수 ",(0,s.kt)("inlineCode",{parentName:"p"},"_"),"의 인스턴스가 하나 이상 존재한다면 ",(0,s.kt)("inlineCode",{parentName:"p"},"lodash")," 패키지를 포함하고 필요한 모듈에 제공합니다.")),(0,s.kt)("p",null,"빌드를 실행해도 동일한 출력이 표시되어야 합니다."),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-bash",parentName:"pre"},"$ ",(0,s.kt)("span",{className:"token function",parentName:"code"},"npm")," run build\n\n",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},".."),"\n\n",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"["),"webpack-cli",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"]")," Compilation finished\nasset main.js ",(0,s.kt)("span",{className:"token number",parentName:"code"},"69.1")," KiB ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"["),"emitted",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"["),"minimized",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"("),"name: main",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,s.kt)("span",{className:"token number",parentName:"code"},"1")," related asset\nruntime modules ",(0,s.kt)("span",{className:"token number",parentName:"code"},"344")," bytes ",(0,s.kt)("span",{className:"token number",parentName:"code"},"2")," modules\ncacheable modules ",(0,s.kt)("span",{className:"token number",parentName:"code"},"530")," KiB\n  ./src/index.js ",(0,s.kt)("span",{className:"token number",parentName:"code"},"191")," bytes ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"["),"built",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"["),"code generated",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\n  ./node_modules/lodash/lodash.js ",(0,s.kt)("span",{className:"token number",parentName:"code"},"530")," KiB ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"["),"built",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"["),"code generated",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\nwebpack ",(0,s.kt)("span",{className:"token number",parentName:"code"},"5.4"),".0 compiled successfully ",(0,s.kt)("span",{className:"token keyword",parentName:"code"},"in")," ",(0,s.kt)("span",{className:"token number",parentName:"code"},"2910")," ms")),(0,s.kt)("p",null,"또한 ",(0,s.kt)("inlineCode",{parentName:"p"},"ProvidePlugin"),'에서 "배열 경로"(예: ',(0,s.kt)("inlineCode",{parentName:"p"},"[module, child, ...children?]"),")를 구성하여 모듈의 일부분만 내보낼 수 있습니다. 호출될 때마다 ",(0,s.kt)("inlineCode",{parentName:"p"},"lodash"),"에서 ",(0,s.kt)("inlineCode",{parentName:"p"},"join")," 메소드만 제공하고 싶다고 가정해 보겠습니다."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"src/index.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"function component() {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  const element = document.createElement('div');\n")),"\n",(0,s.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,s.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  element.innerHTML = join(['Hello', 'webpack'], ' ');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  return element;\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"}\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"document.body.appendChild(component());")))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"const path = require('path');\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"const webpack = require('webpack');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"module.exports = {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  entry: './src/index.js',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  output: {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    filename: 'main.js',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    path: path.resolve(__dirname, 'dist'),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  },\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  plugins: [\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    new webpack.ProvidePlugin({\n")),(0,s.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,s.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.kt)("span",{className:"token line",parentName:"span"},"      _: 'lodash',\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"      join: ['lodash', 'join'],\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    }),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  ],\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"};")))),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"lodash")," 라이브러리의 나머지는 삭제되므로 ",(0,s.kt)("a",{href:"/guides/tree-shaking",parentName:"p"},"트리 쉐이킹"),"이 잘 수행됩니다."),(0,s.kt)("h2",null,(0,s.kt)("span",{id:"granular-shimming",parentName:"h2"}),"Granular Shimming",(0,s.kt)("a",{href:"#granular-shimming","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.kt)("span",{className:"header-link",parentName:"a"}))),(0,s.kt)("p",null,"일부 레거시 모듈은 ",(0,s.kt)("inlineCode",{parentName:"p"},"this"),"가 ",(0,s.kt)("inlineCode",{parentName:"p"},"window")," 객체에 의존합니다. ",(0,s.kt)("inlineCode",{parentName:"p"},"index.js"),"를 업데이트해 보겠습니다."),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"function component() {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  const element = document.createElement('div');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  element.innerHTML = join(['Hello', 'webpack'], ' ');\n")),"\n",(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  // `window의` 컨텍스트에 있다고 가정합니다.\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},'  this.alert("Hmmm, this probably isn\'t a great idea...");\n'),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  return element;\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"}\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"document.body.appendChild(component());")))),(0,s.kt)("p",null,"이것은 ",(0,s.kt)("inlineCode",{parentName:"p"},"this"),"가 ",(0,s.kt)("inlineCode",{parentName:"p"},"module.exports"),"와 같은 CommonJS 컨텍스트에서 모듈이 실행될 때 문제가 됩니다. 이 경우 ",(0,s.kt)("a",{href:"/loaders/imports-loader/",parentName:"p"},(0,s.kt)("inlineCode",{parentName:"a"},"imports-loader")),"를 사용하여 ",(0,s.kt)("inlineCode",{parentName:"p"},"this"),"를 재정의할 수 있습니다."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"const path = require('path');\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"const webpack = require('webpack');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"module.exports = {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  entry: './src/index.js',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  output: {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    filename: 'main.js',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    path: path.resolve(__dirname, 'dist'),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  },\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  module: {\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    rules: [\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"      {\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"        test: require.resolve('./src/index.js'),\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"        use: 'imports-loader?wrapper=window',\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"      },\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    ],\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  },\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  plugins: [\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    new webpack.ProvidePlugin({\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"      join: ['lodash', 'join'],\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    }),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  ],\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"};")))),(0,s.kt)("h2",null,(0,s.kt)("span",{id:"global-exports",parentName:"h2"}),"Global Exports",(0,s.kt)("a",{href:"#global-exports","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.kt)("span",{className:"header-link",parentName:"a"}))),(0,s.kt)("p",null,"라이브러리가 사용자가 사용할 것으로 예상하는 전역 변수를 생성한다고 가정해 보겠습니다. 이를 증명하기 위해 작은 모듈을 추가할 수 있습니다."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"프로젝트")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," webpack-demo\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- package.json\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- package-lock.json\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- webpack.config.js\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- /dist\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- /src\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"   |- index.js\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"   |- globals.js\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- /node_modules")))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"src/globals.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,s.kt)("span",{className:"token keyword",parentName:"code"},"const")," file ",(0,s.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,s.kt)("span",{className:"token string",parentName:"code"},"'blah.txt'"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,s.kt)("span",{className:"token keyword",parentName:"code"},"const")," helpers ",(0,s.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,s.kt)("span",{className:"token function-variable function",parentName:"code"},"test"),(0,s.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    console",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,s.kt)("span",{className:"token function",parentName:"code"},"log"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,s.kt)("span",{className:"token string",parentName:"code"},"'test something'"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,s.kt)("span",{className:"token function-variable function",parentName:"code"},"parse"),(0,s.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    console",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,s.kt)("span",{className:"token function",parentName:"code"},"log"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,s.kt)("span",{className:"token string",parentName:"code"},"'parse something'"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,s.kt)("p",null,"소스 코드에서 이러한 작업을 수행할 수는 없지만, 위에 표시된 코드와 유사한 오래된 라이브러리를 접했을 수 있습니다. 이 경우 ",(0,s.kt)("a",{href:"/loaders/exports-loader/",parentName:"p"},(0,s.kt)("inlineCode",{parentName:"a"},"exports-loader")),"를 사용하여 해당 전역 변수를 일반 모듈로 내보낼 수 있습니다. 예를 들어 ",(0,s.kt)("inlineCode",{parentName:"p"},"file"),"을 ",(0,s.kt)("inlineCode",{parentName:"p"},"file"),"로, ",(0,s.kt)("inlineCode",{parentName:"p"},"helpers.parse"),"를 ",(0,s.kt)("inlineCode",{parentName:"p"},"parse"),"로 내보내 봅시다."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"const path = require('path');\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"const webpack = require('webpack');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"module.exports = {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  entry: './src/index.js',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  output: {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    filename: 'main.js',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    path: path.resolve(__dirname, 'dist'),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  },\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  module: {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    rules: [\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"      {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"        test: require.resolve('./src/index.js'),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"        use: 'imports-loader?wrapper=window',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"      },\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"      {\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"        test: require.resolve('./src/globals.js'),\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"        use:\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"          'exports-loader?type=commonjs&exports=file,multiple|helpers.parse|parse',\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"      },\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    ],\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  },\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  plugins: [\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    new webpack.ProvidePlugin({\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"      join: ['lodash', 'join'],\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    }),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  ],\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"};")))),(0,s.kt)("p",null,"이제 엔트리 스크립트(예: ",(0,s.kt)("inlineCode",{parentName:"p"},"src/index.js"),")에서 ",(0,s.kt)("inlineCode",{parentName:"p"},"const {file, parse} = require('./globals.js');"),"를 사용할 수 있으며 원활하게 작동합니다."),(0,s.kt)("h2",null,(0,s.kt)("span",{id:"loading-polyfills",parentName:"h2"}),"Loading Polyfills",(0,s.kt)("a",{href:"#loading-polyfills","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.kt)("span",{className:"header-link",parentName:"a"}))),(0,s.kt)("p",null,"지금까지 논의한 대부분은 레거시 패키지 처리와 관련이 있습니다. 두 번째 주제인 ",(0,s.kt)("strong",{parentName:"p"},"폴리필로")," 넘어가겠습니다."),(0,s.kt)("p",null,"폴리필을 로드하는 방법에는 여러 가지가 있습니다. 예를 들어 ",(0,s.kt)("a",{href:"https://babeljs.io/docs/en/babel-polyfill/",parentName:"p"},(0,s.kt)("inlineCode",{parentName:"a"},"babel-polyfill")),"을 포함하려면 다음과 같이하면 됩니다."),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-bash",parentName:"pre"},(0,s.kt)("span",{className:"token function",parentName:"code"},"npm")," ",(0,s.kt)("span",{className:"token function",parentName:"code"},"install")," --save babel-polyfill")),(0,s.kt)("p",null,"메인 번들에 포함되도록 ",(0,s.kt)("inlineCode",{parentName:"p"},"import")," 합니다."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"src/index.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"import 'babel-polyfill';\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"function component() {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  const element = document.createElement('div');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  element.innerHTML = join(['Hello', 'webpack'], ' ');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  // `window`의 컨텍스트에 있다고 가정합니다.\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},'  this.alert("Hmmm, this probably isn\'t a great idea...");\n')),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  return element;\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"}\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"document.body.appendChild(component());")))),(0,s.kt)("aside",{className:"tip"},(0,s.kt)("h6",{className:"tip__prefix",parentName:"aside"},"tip"),(0,s.kt)("p",{parentName:"aside"},(0,s.kt)("inlineCode",{parentName:"p"},"import"),"한 것을 변수에 바인딩하지 않습니다. 이는 폴리필이 나머지 코드 베이스 이전에 자체적으로 실행되는 특정 기능이 존재한다고 가정하기 때문입니다.")),(0,s.kt)("p",null,"이 접근 방식은 번들 크기보다 정확성을 우선시합니다. 안전과 견고함을 위해서는 폴리필이나 shim이 ",(0,s.kt)("strong",{parentName:"p"},"다른 모든 코드보다 먼저"),' 실행되어야 하므로 동기식으로 로드하거나 모든 앱 코드는 모든 폴리필이나 shim이 로드된 후에 로드해야 합니다.\n또한 커뮤니티에는 최신 브라우저에 폴리필이 "필요하지 않다"거나 폴리필이나 shim이 누락된 기능을 추가하는 역할만 한다는 오해가 많이 있습니다. 사실, 가장 최신 브라우저에서도 종종 ',(0,s.kt)("em",{parentName:"p"},"깨진 구현을 복구")," 합니다.\n따라서 번들 크기 비용이 발생하더라도 모든 폴리필이나 shim을 무조건 동기식으로 로드하는 것이 모범 사례입니다."),(0,s.kt)("p",null,"문제가 해결됐다고 생각하고 위험을 감수하고 싶다면 다음과 같은 방법도 있습니다.\n",(0,s.kt)("inlineCode",{parentName:"p"},"import"),"를 새 파일로 이동하고 ",(0,s.kt)("a",{href:"https://github.com/github/fetch",parentName:"p"},(0,s.kt)("inlineCode",{parentName:"a"},"whatwg-fetch"))," 폴리필을 추가해 보겠습니다."),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-bash",parentName:"pre"},(0,s.kt)("span",{className:"token function",parentName:"code"},"npm")," ",(0,s.kt)("span",{className:"token function",parentName:"code"},"install")," --save whatwg-fetch")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"src/index.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,s.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.kt)("span",{className:"token line",parentName:"span"},"import 'babel-polyfill';\n"),(0,s.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.kt)("span",{className:"token line",parentName:"span"},"\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"function component() {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  const element = document.createElement('div');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  element.innerHTML = join(['Hello', 'webpack'], ' ');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  // `window`의 컨텍스트에 있다고 가정합니다.\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},'  this.alert("Hmmm, this probably isn\'t a great idea...");\n')),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  return element;\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"}\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"document.body.appendChild(component());")))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"project")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," webpack-demo\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- package.json\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- package-lock.json\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- webpack.config.js\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- /dist\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- /src\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"   |- index.js\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"   |- globals.js\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"   |- polyfills.js\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- /node_modules")))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"src/polyfills.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,s.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,s.kt)("span",{className:"token string",parentName:"code"},"'babel-polyfill'"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,s.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,s.kt)("span",{className:"token string",parentName:"code"},"'whatwg-fetch'"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"const path = require('path');\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"const webpack = require('webpack');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"module.exports = {\n")),(0,s.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,s.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  entry: './src/index.js',\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  entry: {\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    polyfills: './src/polyfills',\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    index: './src/index.js',\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  },\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  output: {\n")),(0,s.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,s.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    filename: 'main.js',\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    filename: '[name].bundle.js',\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    path: path.resolve(__dirname, 'dist'),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  },\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  module: {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    rules: [\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"      {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"        test: require.resolve('./src/index.js'),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"        use: 'imports-loader?wrapper=window',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"      },\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"      {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"        test: require.resolve('./src/globals.js'),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"        use:\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"          'exports-loader?type=commonjs&exports[]=file&exports[]=multiple|helpers.parse|parse',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"      },\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    ],\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  },\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  plugins: [\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    new webpack.ProvidePlugin({\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"      join: ['lodash', 'join'],\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    }),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  ],\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"};")))),(0,s.kt)("p",null,"이를 통해 새로운 ",(0,s.kt)("inlineCode",{parentName:"p"},"polyfills.bundle.js")," 파일을 조건부로 로드하는 로직을 추가 할 수 있습니다. 이 결정을 내리는 방법은 지원 기술과 브라우저에 따라 다릅니다. polyfill이 필요한지 여부를 확인하기 위해 몇 가지 간단한 테스트를 수행합니다."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"dist/index.html")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"<!DOCTYPE html>\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"<html>\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  <head>\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},'    <meta charset="utf-8" />\n'),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    <title>Getting Started</title>\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    <script>\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"      const modernBrowser = 'fetch' in window && 'assign' in Object;\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"      if (!modernBrowser) {\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"        const scriptElement = document.createElement('script');\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"        scriptElement.async = false;\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"        scriptElement.src = '/polyfills.bundle.js';\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"        document.head.appendChild(scriptElement);\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"      }\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    <\/script>\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  </head>\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  <body>\n")),(0,s.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,s.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.kt)("span",{className:"token line",parentName:"span"},'    <script src="main.js"><\/script>\n')),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},'    <script src="index.bundle.js"><\/script>\n')),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  </body>\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"</html>")))),(0,s.kt)("p",null,"이제 엔트리 스크립트에서 일부 데이터를 가져올 수 있습니다."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"src/index.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"function component() {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  const element = document.createElement('div');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  element.innerHTML = join(['Hello', 'webpack'], ' ');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  // `window`의 컨텍스트에 있다고 가정합니다.\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},'  this.alert("Hmmm, this probably isn\'t a great idea...");\n')),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  return element;\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"}\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"document.body.appendChild(component());\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"fetch('https://jsonplaceholder.typicode.com/users')\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  .then((response) => response.json())\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  .then((json) => {\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    console.log(\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},'      "We retrieved some data! AND we\'re confident it will work on a variety of browser distributions."\n'),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    );\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    console.log(json);\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  })\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  .catch((error) =>\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    console.error('Something went wrong when fetching this data: ', error)\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  );")))),(0,s.kt)("p",null,"빌드를 실행하면 ",(0,s.kt)("inlineCode",{parentName:"p"},"polyfills.bundle.js")," 파일이 생성되고 브라우저에서 원활하게 동작하게 됩니다. 이 설정은 개선될 수 있지만 실제로 필요한 사용자에게만 폴리필을 제공하는 방법에 대한 좋은 아이디어입니다."),(0,s.kt)("h2",null,(0,s.kt)("span",{id:"further-optimizations",parentName:"h2"}),"Further Optimizations",(0,s.kt)("a",{href:"#further-optimizations","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.kt)("span",{className:"header-link",parentName:"a"}))),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"babel-preset-env")," 패키지는 ",(0,s.kt)("a",{href:"https://github.com/browserslist/browserslist",parentName:"p"},"browserslist"),"를 사용하여 브라우저 매트릭스에서 지원되지 않는 항목만 트랜스파일합니다. 이 사전 설정은 ",(0,s.kt)("a",{href:"https://babeljs.io/docs/en/babel-preset-env#usebuiltins",parentName:"p"},(0,s.kt)("inlineCode",{parentName:"a"},"useBuiltIns"))," 옵션(기본값 ",(0,s.kt)("inlineCode",{parentName:"p"},"false"),")과 함께 제공되며, 전역 ",(0,s.kt)("inlineCode",{parentName:"p"},"babel-polyfill"),"을 가져오는 것을 ",(0,s.kt)("inlineCode",{parentName:"p"},"import")," 패턴을 통해 더 세분화 된 기능으로 변환할 수 있습니다."),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,s.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,s.kt)("span",{className:"token string",parentName:"code"},"'core-js/modules/es7.string.pad-start'"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,s.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,s.kt)("span",{className:"token string",parentName:"code"},"'core-js/modules/es7.string.pad-end'"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,s.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,s.kt)("span",{className:"token string",parentName:"code"},"'core-js/modules/web.timers'"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,s.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,s.kt)("span",{className:"token string",parentName:"code"},"'core-js/modules/web.immediate'"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,s.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,s.kt)("span",{className:"token string",parentName:"code"},"'core-js/modules/web.dom.iterable'"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,s.kt)("p",null,"자세한 내용은 ",(0,s.kt)("a",{href:"https://babeljs.io/docs/en/babel-preset-env",parentName:"p"},"babel-preset-env 문서"),"를 참고하세요."),(0,s.kt)("h2",null,(0,s.kt)("span",{id:"node-built-ins",parentName:"h2"}),"Node Built-Ins",(0,s.kt)("a",{href:"#node-built-ins","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.kt)("span",{className:"header-link",parentName:"a"}))),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"process"),"와 같은 Node 내장 기능은 특별한 로더나 플러그인을 사용하지 않고도 설정 파일에서 직접 폴리필 할 수 있습니다. 자세한 내용과 예제는 ",(0,s.kt)("a",{href:"/configuration/node",parentName:"p"},"node 설정 페이지"),"를 참고하세요."),(0,s.kt)("h2",null,(0,s.kt)("span",{id:"other-utilities",parentName:"h2"}),"Other Utilities",(0,s.kt)("a",{href:"#other-utilities","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.kt)("span",{className:"header-link",parentName:"a"}))),(0,s.kt)("p",null,"레거시 모듈을 다룰 때 도움이 될 수 있는 몇 가지 도구가 있습니다."),(0,s.kt)("p",null,"모듈에 AMD/CommonJS 버전이 없고 ",(0,s.kt)("inlineCode",{parentName:"p"},"dist"),"를 포함하려는 경우 ",(0,s.kt)("a",{href:"/configuration/module/#modulenoparse",parentName:"p"},(0,s.kt)("inlineCode",{parentName:"a"},"noParse")),"에서 플래그를 지정할 수 있습니다. 이렇게하면 webpack이 모듈을 파싱하거나 ",(0,s.kt)("inlineCode",{parentName:"p"},"require()")," 및 ",(0,s.kt)("inlineCode",{parentName:"p"},"import")," 문을 해석하지 않고 모듈을 포함하게됩니다. 이 방법은 빌드 성능을 향상시키는데도 사용됩니다."),(0,s.kt)("aside",{className:"warning"},(0,s.kt)("h6",{className:"warning__prefix",parentName:"aside"},"warning"),(0,s.kt)("p",{parentName:"aside"},(0,s.kt)("inlineCode",{parentName:"p"},"ProvidePlugin"),"과 같이 AST가 필요한 기능은 동작하지 않습니다.")),(0,s.kt)("p",null,"마지막으로 여러 ",(0,s.kt)("a",{href:"/concepts/modules",parentName:"p"},"모듈 스타일"),"을 지원하는 모듈이 있습니다. (예: AMD, CommonJS 및 레거시의 조합) 대부분의 경우, 먼저 ",(0,s.kt)("inlineCode",{parentName:"p"},"define"),"을 확인한 다음 일부 코드를 사용하여 속성을 내보냅니다. 이 경우 ",(0,s.kt)("a",{href:"/loaders/imports-loader/",parentName:"p"},(0,s.kt)("inlineCode",{parentName:"a"},"imports-loader")),"를 통해 ",(0,s.kt)("inlineCode",{parentName:"p"},"additionalCode=var%define%20=%20false;"),"를 설정하여 CommonJS 경로를 강제하는 것이 도움이 될 수 있습니다."))}p.isMDXComponent=!0,a.default=p}}]);