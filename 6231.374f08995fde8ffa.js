"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6231],{6231:function(e,a,t){t.r(a),t(7378);var n=t(2682);function p(){return p=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},p.apply(this,arguments)}function s(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",p({components:a},t),(0,n.kt)("p",null,"이 가이드에는 빌드/컴파일 성능을 개선하기 위한 몇 가지 유용한 팁이 포함되어 있습니다."),(0,n.kt)("hr",null),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"general",parentName:"h2"}),"General",(0,n.kt)("a",{href:"#general","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"다음의 모범 사례는 ",(0,n.kt)("a",{href:"/guides/development",parentName:"p"},"development")," 또는 ",(0,n.kt)("a",{href:"/guides/production",parentName:"p"},"production"),"에서 빌드 스크립트를 실행하는 경우 도움이 될 것입니다."),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"stay-up-to-date",parentName:"h3"}),"Stay Up to Date",(0,n.kt)("a",{href:"#stay-up-to-date","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"최신 webpack 버전을 사용하세요. 우리는 항상 성능을 개선하고 있습니다. webpack의 권장 최신 버전은 다음과 같습니다."),(0,n.kt)("p",null,(0,n.kt)("a",{href:"https://github.com/webpack/webpack/releases",parentName:"p"},(0,n.kt)("img",{src:"https://img.shields.io/github/package-json/v/webpack/webpack.svg?label=webpack&style=flat-square&maxAge=3600",alt:"latest webpack version",parentName:"a"}))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Node.js를")," 최신 상태로 유지하면 성능에 도움이 될 수 있습니다. 또한 패키지 관리자(예: ",(0,n.kt)("inlineCode",{parentName:"p"},"npm")," 또는 ",(0,n.kt)("inlineCode",{parentName:"p"},"yarn"),")를 최신 상태로 유지하는 것도 도움이 될 수 있습니다. 최신 버전은 더 효율적인 모듈 트리를 생성하고 해석하는 속도를 높입니다."),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"loaders",parentName:"h3"}),"Loaders",(0,n.kt)("a",{href:"#loaders","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"최소한으로 필요한 모듈에만 로더를 적용하세요."),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,n.kt)("span",{className:"token comment",parentName:"code"},"//..."),"\n  module",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    rules",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"["),"\n      ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n        test",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token regex",parentName:"code"},"/\\.js$/"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n        loader",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'babel-loader'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("p",null,"위와 같은 방식보다는 아래처럼 ",(0,n.kt)("inlineCode",{parentName:"p"},"include")," 필드를 사용하여 실제로 변환해야 하는 모듈에만 로더를 적용합니다."),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,n.kt)("span",{className:"token keyword",parentName:"code"},"const")," path ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token function",parentName:"code"},"require"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token string",parentName:"code"},"'path'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\nmodule",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,n.kt)("span",{className:"token comment",parentName:"code"},"//..."),"\n  module",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    rules",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"["),"\n      ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n        test",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token regex",parentName:"code"},"/\\.js$/"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n        include",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," path",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,n.kt)("span",{className:"token function",parentName:"code"},"resolve"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),"__dirname",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'src'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n        loader",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'babel-loader'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"bootstrap",parentName:"h3"}),"Bootstrap",(0,n.kt)("a",{href:"#bootstrap","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"각각의 추가 로더/플러그인에는 부팅 시간이 있습니다. 가능한 한 도구를 적게 사용하세요."),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"resolving",parentName:"h3"}),"Resolving",(0,n.kt)("a",{href:"#resolving","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"아래의 단계들로 해석 속도를 향상 시킬 수 있습니다."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"파일 시스템의 호출 수가 증가되기 때문에 ",(0,n.kt)("inlineCode",{parentName:"li"},"resolve.modules"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"resolve.extensions"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"resolve.mainFiles"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"resolve.descriptionFiles"),"의 항목 수를 최소화하세요."),(0,n.kt)("li",{parentName:"ul"},"심볼릭 링크를 사용하지 않는 경우 ",(0,n.kt)("inlineCode",{parentName:"li"},"resolve.symlinks: false"),"를 설정하세요(예: ",(0,n.kt)("inlineCode",{parentName:"li"},"npm link")," 또는 ",(0,n.kt)("inlineCode",{parentName:"li"},"yarn link"),")."),(0,n.kt)("li",{parentName:"ul"},"컨텍스트에 특정적이지 않은 커스텀 해석 플러그인을 사용하는 경우 ",(0,n.kt)("inlineCode",{parentName:"li"},"resolve.cacheWithContext: false"),"를 설정하세요.")),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"dlls",parentName:"h3"}),"Dlls",(0,n.kt)("a",{href:"#dlls","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"자주 변경되지 않는 코드를 별도의 컴파일로 이동하려면 ",(0,n.kt)("inlineCode",{parentName:"p"},"DllPlugin"),"을 사용하세요. 이렇게 하면 빌드 프로세스가 복잡해 지지만 애플리케이션의 컴파일 속도가 향상됩니다."),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"smaller--faster",parentName:"h3"}),"Smaller = Faster",(0,n.kt)("a",{href:"#smaller--faster","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"빌드 성능을 높이려면 컴파일의 총 크기를 줄이세요. 청크를 작게 유지하세요."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"더 적고 작은 라이브러리 사용"),(0,n.kt)("li",{parentName:"ul"},"다중 페이지 애플리케이션에서 ",(0,n.kt)("inlineCode",{parentName:"li"},"SplitChunksPlugin"),"을 사용"),(0,n.kt)("li",{parentName:"ul"},"다중 페이지 애플리케이션의 ",(0,n.kt)("inlineCode",{parentName:"li"},"async")," 모드에서 ",(0,n.kt)("inlineCode",{parentName:"li"},"SplitChunksPlugin"),"을 사용"),(0,n.kt)("li",{parentName:"ul"},"사용하지 않는 코드를 제거"),(0,n.kt)("li",{parentName:"ul"},"현재 개발중인 코드의 일부만 컴파일")),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"worker-pool",parentName:"h3"}),"Worker Pool",(0,n.kt)("a",{href:"#worker-pool","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"thread-loader"),"는 작업량이 큰 로더를 worker 풀에 작업을 분담할 때 사용할 수 있습니다."),(0,n.kt)("aside",{className:"warning"},(0,n.kt)("h6",{className:"warning__prefix",parentName:"aside"},"warning"),(0,n.kt)("p",{parentName:"aside"},"Node.js 런타임 및 로더에 대한 부팅 오버헤드가 있음으로 너무 많은 worker를 사용하지 마세요. worker와 메인 프로세스 간의 모듈 전송을 최소화하세요. IPC는 큰 비용을 필요로 합니다.")),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"persistent-cache",parentName:"h3"}),"Persistent cache",(0,n.kt)("a",{href:"#persistent-cache","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"webpack 설정에서 ",(0,n.kt)("a",{href:"/configuration/cache",parentName:"p"},(0,n.kt)("inlineCode",{parentName:"a"},"cache"))," 옵션을 사용하세요. ",(0,n.kt)("inlineCode",{parentName:"p"},"package.json"),"의 ",(0,n.kt)("inlineCode",{parentName:"p"},'"postinstall"'),"에서 캐시 디렉터리를 지우세요."),(0,n.kt)("aside",{className:"tip"},(0,n.kt)("h6",{className:"tip__prefix",parentName:"aside"},"tip"),(0,n.kt)("p",{parentName:"aside"},"영구 캐싱을 위해 yarn PnP 버전 3 ",(0,n.kt)("a",{href:"https://yarnpkg.com/features/pnp",parentName:"p"},(0,n.kt)("inlineCode",{parentName:"a"},"yarn 2 berry")),"를 지원합니다.")),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"custom-pluginsloaders",parentName:"h3"}),"Custom plugins/loaders",(0,n.kt)("a",{href:"#custom-pluginsloaders","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"커스텀 플러그인과 로더에서 성능 문제가 발생하지 않도록 프로파일 하세요."),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"progress-plugin",parentName:"h3"}),"Progress plugin",(0,n.kt)("a",{href:"#progress-plugin","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"webpack 구성에서 ",(0,n.kt)("inlineCode",{parentName:"p"},"ProgressPlugin"),"을 제거하여 빌드 시간을 단축 할 수 있습니다. ",(0,n.kt)("inlineCode",{parentName:"p"},"ProgressPlugin"),"은 빠른 빌드에 유용하지 않을 수 있기 때문에 이점을 잘 활용하고 있는지 확인하세요."),(0,n.kt)("hr",null),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"development",parentName:"h2"}),"Development",(0,n.kt)("a",{href:"#development","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"다음 단계는 ",(0,n.kt)("em",{parentName:"p"},"개발 단계에서")," 특히 유용합니다."),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"incremental-builds",parentName:"h3"}),"Incremental Builds",(0,n.kt)("a",{href:"#incremental-builds","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"webpack의 watch 모드를 사용하세요. 다른 도구를 사용하여 파일을 보고 webpack을 호출하지 마세요. 내장된 watch 모드는 타임 스탬프를 추적하고 캐시 무효화를 위해 이 정보를 컴파일에 전달합니다."),(0,n.kt)("p",null,"일부 설정에서는 watch가 폴링 모드로 돌아갑니다. watch 되는 파일이 많으면 이로 인해 많은 CPU 로드가 발생할 수 있습니다. 이 경우 ",(0,n.kt)("inlineCode",{parentName:"p"},"watchOptions.poll"),"을 사용하여 폴링 간격을 늘릴 수 있습니다."),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"compile-in-memory",parentName:"h3"}),"Compile in Memory",(0,n.kt)("a",{href:"#compile-in-memory","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"아래의 유틸리티는 디스크에 쓰는 대신 메모리에서 애셋을 컴파일하고 제공하여 성능을 향상시킵니다."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"webpack-dev-server")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"webpack-hot-middleware")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"webpack-dev-middleware"))),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"statstojson-speed",parentName:"h3"}),"stats.toJson speed",(0,n.kt)("a",{href:"#statstojson-speed","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"Webpack 4는 기본적으로 ",(0,n.kt)("inlineCode",{parentName:"p"},"stats.toJson()"),"을 사용하여 많은 양의 데이터를 출력합니다. 증분 단계에서 필요한 경우가 아니면 ",(0,n.kt)("inlineCode",{parentName:"p"},"stats")," 개체의 일부를 찾지 마세요. v3.1.3 이후의 ",(0,n.kt)("inlineCode",{parentName:"p"},"webpack-dev-server"),"에는 증분 빌드 단계에서 ",(0,n.kt)("inlineCode",{parentName:"p"},"stats")," 객체에서 검색되는 데이터의 양을 최소화하기 위한 상당한 성능 수정이 포함되었습니다."),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"devtool",parentName:"h3"}),"Devtool",(0,n.kt)("a",{href:"#devtool","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"서로 다른 ",(0,n.kt)("inlineCode",{parentName:"p"},"devtool")," 설정 간의 성능 차이에 유의하세요."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},'"eval"'),"은 성능이 좋지만 트랜스파일 된 코드에는 도움이 되지 않습니다."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"cheap-source-map")," 변형은 매핑의 질이 약간 떨어지지만, 성능이 좋습니다."),(0,n.kt)("li",{parentName:"ul"},"증분 빌드에서는 ",(0,n.kt)("inlineCode",{parentName:"li"},"eval-source-map")," 변형을 사용합니다.")),(0,n.kt)("aside",{className:"tip"},(0,n.kt)("h6",{className:"tip__prefix",parentName:"aside"},"tip"),(0,n.kt)("p",{parentName:"aside"},"대부분의 경우 ",(0,n.kt)("inlineCode",{parentName:"p"},"eval-cheap-module-source-map"),"이 가장 좋은 옵션입니다.")),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"avoid-production-specific-tooling",parentName:"h3"}),"Avoid Production Specific Tooling",(0,n.kt)("a",{href:"#avoid-production-specific-tooling","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"특정 유틸리티, 플러그인 및 로더는 production으로 빌드할 때만 의미가 있습니다. 예를 들어, 개발 중에 ",(0,n.kt)("inlineCode",{parentName:"p"},"TerserPlugin"),"을 사용하여 코드를 축소하고 조작하는 것은 일반적으로 이치에 맞지 않습니다. 이러한 도구는 일반적으로 개발 단계에서 제외되어야 합니다."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"TerserPlugin")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"[fullhash]"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"[chunkhash]"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"[contenthash]")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"AggressiveSplittingPlugin")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"AggressiveMergingPlugin")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"ModuleConcatenationPlugin"))),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"minimal-entry-chunk",parentName:"h3"}),"Minimal Entry Chunk",(0,n.kt)("a",{href:"#minimal-entry-chunk","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"Webpack은 파일 시스템에 업데이트된 청크만 내보냅니다. 일부 설정 옵션의 경우(HMR, ",(0,n.kt)("inlineCode",{parentName:"p"},"output.chunkFilename"),",",(0,n.kt)("inlineCode",{parentName:"p"},"[fullhash]")," 안의 ",(0,n.kt)("inlineCode",{parentName:"p"},"[name]"),"/",(0,n.kt)("inlineCode",{parentName:"p"},"[chunkhash]"),"/",(0,n.kt)("inlineCode",{parentName:"p"},"[contenthash]"),") 변경된 청크와 함께 엔트리 청크가 무효화됩니다."),(0,n.kt)("p",null,"엔트리 청크를 작게 유지하여 내보내는 비용이 저렴한지 확인하세요. 아래의 설정은 런타임 코드에 대한 추가 청크를 생성하므로 생성 비용이 저렴합니다."),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,n.kt)("span",{className:"token comment",parentName:"code"},"// ..."),"\n  optimization",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    runtimeChunk",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token boolean",parentName:"code"},"true"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"avoid-extra-optimization-steps",parentName:"h3"}),"Avoid Extra Optimization Steps",(0,n.kt)("a",{href:"#avoid-extra-optimization-steps","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"Webpack은 크기 및 부하 성능에 대한 출력을 최적화하기 위해 추가 알고리즘 작업을 수행합니다. 이러한 최적화는 작은 코드 베이스에서는 성능이 좋지만 큰 코드에서는 비용이 많이들 수 있습니다."),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,n.kt)("span",{className:"token comment",parentName:"code"},"// ..."),"\n  optimization",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    removeAvailableModules",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token boolean",parentName:"code"},"false"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    removeEmptyChunks",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token boolean",parentName:"code"},"false"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    splitChunks",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token boolean",parentName:"code"},"false"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"output-without-path-info",parentName:"h3"}),"Output Without Path Info",(0,n.kt)("a",{href:"#output-without-path-info","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"Webpack은 출력 번들에 경로 정보를 생성하는 기능이 있습니다. 그러나 이것은 수천 개의 모듈을 번들로 묶는 프로젝트에서 가비지 컬렉션에 과부화를 줍니다. ",(0,n.kt)("inlineCode",{parentName:"p"},"options.output.pathinfo")," 설정에서 이 기능을 끄세요."),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,n.kt)("span",{className:"token comment",parentName:"code"},"// ..."),"\n  output",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    pathinfo",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token boolean",parentName:"code"},"false"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"nodejs-versions-8910-9111",parentName:"h3"}),"Node.js Versions 8.9.10-9.11.1",(0,n.kt)("a",{href:"#nodejs-versions-8910-9111","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"Node.js 버전 8.9.10 - 9.11.1의 ES2015 ",(0,n.kt)("inlineCode",{parentName:"p"},"Map")," 및 ",(0,n.kt)("inlineCode",{parentName:"p"},"Set")," 구현에서 ",(0,n.kt)("a",{href:"https://github.com/nodejs/node/issues/19769",parentName:"p"},"성능 저하"),"가 있었습니다. Webpack은 이러한 데이터 구조를 자유롭게 사용하므로 이 성능저하는 컴파일 시간에 영향을 줍니다."),(0,n.kt)("p",null,"이전 및 이후 Node.js 버전은 영향을 받지 않습니다."),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"typescript-loader",parentName:"h3"}),"TypeScript Loader",(0,n.kt)("a",{href:"#typescript-loader","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"ts-loader"),"를 사용할 때 빌드 시간을 개선하려면 ",(0,n.kt)("inlineCode",{parentName:"p"},"transpileOnly")," 로더 옵션을 사용하세요. 이 옵션은 자체적으로 타입 검사를 해제합니다. 타입 검사를 다시 받으려면 ",(0,n.kt)("a",{href:"https://www.npmjs.com/package/fork-ts-checker-webpack-plugin",parentName:"p"},(0,n.kt)("inlineCode",{parentName:"a"},"ForkTsCheckerWebpackPlugin")),"을 사용하세요. 이렇게 각각 별도의 프로세스로 이동시키면 TypeScript 유형 검사 및 ESLint linting 속도가 빨라집니다."),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,n.kt)("span",{className:"token comment",parentName:"code"},"// ..."),"\n  test",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token regex",parentName:"code"},"/\\.tsx?$/"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  use",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"["),"\n    ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      loader",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'ts-loader'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      options",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n        transpileOnly",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token boolean",parentName:"code"},"true"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("aside",{className:"tip"},(0,n.kt)("h6",{className:"tip__prefix",parentName:"aside"},"tip"),(0,n.kt)("p",{parentName:"aside"},(0,n.kt)("inlineCode",{parentName:"p"},"ts-loader")," GitHub 저장소에 ",(0,n.kt)("a",{href:"https://github.com/TypeStrong/ts-loader/tree/master/examples/fork-ts-checker-webpack-plugin",parentName:"p"},"전체 예시"),"가 있습니다.")),(0,n.kt)("hr",null),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"production",parentName:"h2"}),"Production",(0,n.kt)("a",{href:"#production","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"다음 단계는 ",(0,n.kt)("em",{parentName:"p"},"production에서")," 특히 유용합니다."),(0,n.kt)("aside",{className:"warning"},(0,n.kt)("h6",{className:"warning__prefix",parentName:"aside"},"warning"),(0,n.kt)("p",{parentName:"aside"},(0,n.kt)("strong",{parentName:"p"},"작은 성능 향상을 위해 애플리케이션의 품질을 희생하지 마세요!")," 대부분의 경우 최적화 품질이 빌드 성능보다 더 중요합니다.")),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"source-maps",parentName:"h3"}),"Source Maps",(0,n.kt)("a",{href:"#source-maps","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"소스맵은 비용이 많이 듭니다. 정말로 필요한가요?"),(0,n.kt)("hr",null),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"specific-tooling-issues",parentName:"h2"}),"Specific Tooling Issues",(0,n.kt)("a",{href:"#specific-tooling-issues","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"다음 도구에는 빌드 성능을 저하시킬 수 있는 특정 문제가 있습니다."),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"babel",parentName:"h3"}),"Babel",(0,n.kt)("a",{href:"#babel","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"preset/plugins 수를 최소화하세요.")),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"typescript",parentName:"h3"}),"TypeScript",(0,n.kt)("a",{href:"#typescript","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"별도의 프로세스에서 타입 검사를 위해 ",(0,n.kt)("inlineCode",{parentName:"li"},"fork-ts-checker-webpack-plugin"),"을 사용하세요."),(0,n.kt)("li",{parentName:"ul"},"타입 검사를 건너뛰도록 로더를 설정합니다."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"happyPackMode: true")," / ",(0,n.kt)("inlineCode",{parentName:"li"},"transpileOnly: true"),"에서 ",(0,n.kt)("inlineCode",{parentName:"li"},"ts-loader"),"를 사용합니다.")),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"sass",parentName:"h3"}),"Sass",(0,n.kt)("a",{href:"#sass","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"node-sass"),"에는 Node.js 스레드 풀의 스레드를 차단하는 버그가 있습니다. ",(0,n.kt)("inlineCode",{parentName:"li"},"thread-loader"),"와 함께 사용하는 경우 ",(0,n.kt)("inlineCode",{parentName:"li"},"workerParallelJobs: 2"),"를 설정하세요.")))}s.isMDXComponent=!0,a.default=s}}]);