"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[596],{596:function(e,a,n){n.r(a),n(7378);var t=n(2682);function s(){return s=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},s.apply(this,arguments)}function p(e){let{components:a,...n}=e;return(0,t.kt)("wrapper",s({components:a},n),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"tip"),(0,t.kt)("p",{parentName:"aside"},"이 가이드는 ",(0,t.kt)("a",{href:"/guides/getting-started",parentName:"p"},"Getting Started"),"에 제공된 예제를 기준으로 합니다. 해당 예제와 ",(0,t.kt)("a",{href:"/guides/output-management/",parentName:"p"},"Output Management")," 챕터를 미리 알아두도록 합니다.")),(0,t.kt)("p",null,"코드 스플리팅은 webpack의 가장 매력적인 기능 중 하나입니다. 이 기능을 사용하여 코드를 다양한 번들로 분할하고, 요청에 따라 로드하거나 병렬로 로드할 수 있습니다. 더 작은 번들을 만들고 리소스 우선순위를 올바르게 제어하기 위해서 사용하며, 잘 활용하면 로드 시간에 큰 영향을 끼칠 수 있습니다."),(0,t.kt)("p",null,"일반적으로 코드 스플리팅은 세 가지 방식으로 접근할 수 있습니다."),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("strong",{parentName:"li"},"Entry Points"),": ",(0,t.kt)("a",{href:"/configuration/entry-context",parentName:"li"},(0,t.kt)("inlineCode",{parentName:"a"},"entry"))," 설정을 사용하여 코드를 수동으로 분할합니다."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("strong",{parentName:"li"},"Prevent Duplication"),": ",(0,t.kt)("a",{href:"/configuration/entry-context/#dependencies",parentName:"li"},"Entry dependencies")," 또는 ",(0,t.kt)("a",{href:"/plugins/split-chunks-plugin/",parentName:"li"},(0,t.kt)("inlineCode",{parentName:"a"},"SplitChunksPlugin")),"을 사용하여 중복 청크를 제거하고 청크를 분할합니다."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("strong",{parentName:"li"},"Dynamic Imports"),": 모듈 내에서 인라인 함수 호출을 통해 코드를 분할합니다.")),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"entry-points",parentName:"h2"}),"Entry Points",(0,t.kt)("a",{href:"#entry-points","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"코드를 분할하는 가장 쉽고 직관적인 방법입니다. 그러나 다른 방법에 비해 수동적이며, 같이 살펴볼 몇 가지 함정이 있습니다. 메인 번들에서 다른 모듈을 어떻게 분리하는지 알아보겠습니다."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"project")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},"webpack-demo\n|- package.json\n|- package-lock.json\n|- webpack.config.js\n|- /dist\n|- /src\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," |- index.js\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," |- another-module.js\n")),"|- /node_modules")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"another-module.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import")," _ ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'lodash'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\nconsole",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"log"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"_",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"join"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.kt)("span",{className:"token string",parentName:"code"},"'Another'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'module'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'loaded!'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"' '"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"const path = require('path');\n")),"\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"module.exports = {\n")),(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"  entry: './src/index.js',\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"  mode: 'development',\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"  entry: {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    index: './src/index.js',\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    another: './src/another-module.js',\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"  },\n")),(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"  output: {\n")),(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    filename: 'main.js',\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    filename: '[name].bundle.js',\n")),(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"    path: path.resolve(__dirname, 'dist'),\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"  },\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"};")))),(0,t.kt)("p",null,"다음과 같은 빌드 결과가 생성됩니다."),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-bash",parentName:"pre"},(0,t.kt)("span",{className:"token punctuation",parentName:"code"},".."),".\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"webpack-cli",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," Compilation finished\nasset index.bundle.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"553")," KiB ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"emitted",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"name: index",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),"\nasset another.bundle.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"553")," KiB ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"emitted",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"name: another",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),"\nruntime modules ",(0,t.kt)("span",{className:"token number",parentName:"code"},"2.49")," KiB ",(0,t.kt)("span",{className:"token number",parentName:"code"},"12")," modules\ncacheable modules ",(0,t.kt)("span",{className:"token number",parentName:"code"},"530")," KiB\n  ./src/index.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"257")," bytes ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"built",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"code generated",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\n  ./src/another-module.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"84")," bytes ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"built",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"code generated",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\n  ./node_modules/lodash/lodash.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"530")," KiB ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"built",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"code generated",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\nwebpack ",(0,t.kt)("span",{className:"token number",parentName:"code"},"5.4"),".0 compiled successfully ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"in")," ",(0,t.kt)("span",{className:"token number",parentName:"code"},"245")," ms")),(0,t.kt)("p",null,"언급했듯이 이 접근 방식에는 몇 가지 함정이 있습니다."),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"엔트리 청크 사이에 중복된 모듈이 있는 경우 두 번들에 모두 포함됩니다."),(0,t.kt)("li",{parentName:"ul"},"코어 애플리케이션 로직을 통한 코드의 동적 분할에는 사용할 수 없으며 유연하지 않습니다.")),(0,t.kt)("p",null,"이 중 첫 번째 항목을 통해 지금 예제의 문제를 알 수 있습니다. 왜냐하면 ",(0,t.kt)("inlineCode",{parentName:"p"},"./src/index.js"),"에서도 ",(0,t.kt)("inlineCode",{parentName:"p"},"lodash"),"를 가져오므로 양쪽 번들에서 중복으로 포함되기 때문입니다. 다음 섹션에서 중복된 것을 제거하겠습니다."),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"prevent-duplication",parentName:"h2"}),"Prevent Duplication",(0,t.kt)("a",{href:"#prevent-duplication","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"entry-dependencies",parentName:"h3"}),"Entry dependencies",(0,t.kt)("a",{href:"#entry-dependencies","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("a",{href:"/configuration/entry-context/#dependencies",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"dependOn")," 옵션"),"을 사용하면 청크간 모듈을 공유할 수 있습니다."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"const path = require('path');\n")),"\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"module.exports = {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"  mode: 'development',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"  entry: {\n")),(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    index: './src/index.js',\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    another: './src/another-module.js',\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    index: {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"      import: './src/index.js',\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"      dependOn: 'shared',\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    },\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    another: {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"      import: './src/another-module.js',\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"      dependOn: 'shared',\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    },\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    shared: 'lodash',\n")),(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"  },\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"  output: {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"    filename: '[name].bundle.js',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"    path: path.resolve(__dirname, 'dist'),\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"  },\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"};")))),(0,t.kt)("p",null,"단일 HTML 페이지에서 여러 엔트리 포인트를 사용하는 경우 ",(0,t.kt)("inlineCode",{parentName:"p"},"optimization.runtimeChunk: 'single'"),"도 필요합니다. 그렇지 않으면 ",(0,t.kt)("a",{href:"https://bundlers.tooling.report/",parentName:"p"},"여기"),"에서 설명하는 문제가 발생할 수 있습니다."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"const path = require('path');\n")),"\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"module.exports = {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"  mode: 'development',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"  entry: {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"    index: {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"      import: './src/index.js',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"      dependOn: 'shared',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"    },\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"    another: {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"      import: './src/another-module.js',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"      dependOn: 'shared',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"    },\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"    shared: 'lodash',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"  },\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"  output: {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"    filename: '[name].bundle.js',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"    path: path.resolve(__dirname, 'dist'),\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"  },\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"  optimization: {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    runtimeChunk: 'single',\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"  },\n")),(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"};")))),(0,t.kt)("p",null,"다음은 빌드 결과입니다."),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-bash",parentName:"pre"},(0,t.kt)("span",{className:"token punctuation",parentName:"code"},".."),".\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"webpack-cli",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," Compilation finished\nasset shared.bundle.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"549")," KiB ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"compared ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"for")," emit",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"name: shared",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),"\nasset runtime.bundle.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"7.79")," KiB ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"compared ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"for")," emit",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"name: runtime",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),"\nasset index.bundle.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"1.77")," KiB ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"compared ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"for")," emit",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"name: index",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),"\nasset another.bundle.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"1.65")," KiB ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"compared ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"for")," emit",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"name: another",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),"\nEntrypoint index ",(0,t.kt)("span",{className:"token number",parentName:"code"},"1.77")," KiB ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," index.bundle.js\nEntrypoint another ",(0,t.kt)("span",{className:"token number",parentName:"code"},"1.65")," KiB ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," another.bundle.js\nEntrypoint shared ",(0,t.kt)("span",{className:"token number",parentName:"code"},"557")," KiB ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," runtime.bundle.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"7.79")," KiB shared.bundle.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"549")," KiB\nruntime modules ",(0,t.kt)("span",{className:"token number",parentName:"code"},"3.76")," KiB ",(0,t.kt)("span",{className:"token number",parentName:"code"},"7")," modules\ncacheable modules ",(0,t.kt)("span",{className:"token number",parentName:"code"},"530")," KiB\n  ./node_modules/lodash/lodash.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"530")," KiB ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"built",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"code generated",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\n  ./src/another-module.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"84")," bytes ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"built",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"code generated",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\n  ./src/index.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"257")," bytes ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"built",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"code generated",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\nwebpack ",(0,t.kt)("span",{className:"token number",parentName:"code"},"5.4"),".0 compiled successfully ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"in")," ",(0,t.kt)("span",{className:"token number",parentName:"code"},"249")," ms")),(0,t.kt)("p",null,"보시다시피 ",(0,t.kt)("inlineCode",{parentName:"p"},"shared.bundle.js"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"index.bundle.js")," 및 ",(0,t.kt)("inlineCode",{parentName:"p"},"another.bundle.js")," 외에 또 다른 ",(0,t.kt)("inlineCode",{parentName:"p"},"runtime.bundle.js")," 파일이 생성됩니다."),(0,t.kt)("p",null,"webpack은 하나의 페이지에 여러 엔트리 포인트를 허용하지만, 가능하다면 ",(0,t.kt)("inlineCode",{parentName:"p"},"entry: { page: ['./analytics', './app'] }"),"처럼 여러 개의 import가 포함된 엔트리 포인트 사용을 피해야 합니다. 이는 ",(0,t.kt)("inlineCode",{parentName:"p"},"async")," 스크립트 태그를 사용할 때 최적화에 용이하며 일관된 순서로 실행할 수 있도록 합니다."),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"splitchunksplugin",parentName:"h3"}),"SplitChunksPlugin",(0,t.kt)("a",{href:"#splitchunksplugin","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("a",{href:"/plugins/split-chunks-plugin/",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"SplitChunksPlugin")),"을 사용하면 기존 엔트리 청크 또는 완전히 새로운 청크로 공통 의존성을 추출할 수 있습니다. 이를 활용하여 이전 예제의 ",(0,t.kt)("inlineCode",{parentName:"p"},"lodash")," 중복을 제거해 보겠습니다."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," const path = require('path');\n")),"\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," module.exports = {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   mode: 'development',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   entry: {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"     index: './src/index.js',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"     another: './src/another-module.js',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   },\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   output: {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"     filename: '[name].bundle.js',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"     path: path.resolve(__dirname, 'dist'),\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   },\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   optimization: {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"     splitChunks: {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"       chunks: 'all',\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"     },\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   },\n")),(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," };")))),(0,t.kt)("p",null,(0,t.kt)("a",{href:"/plugins/split-chunks-plugin/#optimizationsplitchunks",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"optimization.splitChunks"))," 설정 옵션을 적용하면 ",(0,t.kt)("inlineCode",{parentName:"p"},"index.bundle.js"),"와 ",(0,t.kt)("inlineCode",{parentName:"p"},"another.bundle.js"),"에서 중복 의존성이 제거된 것을 확인 할 수 있습니다. 플러그인은 ",(0,t.kt)("inlineCode",{parentName:"p"},"lodash"),"가 별도의 청크로 분리되었고 메인 번들에서도 제거된 것을 알 수 있습니다. 잘 동작하는지 확인하기 위해 ",(0,t.kt)("inlineCode",{parentName:"p"},"npm run build"),"를 실행해 보겠습니다."),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-bash",parentName:"pre"},(0,t.kt)("span",{className:"token punctuation",parentName:"code"},".."),".\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"webpack-cli",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," Compilation finished\nasset vendors-node_modules_lodash_lodash_js.bundle.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"549")," KiB ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"compared ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"for")," emit",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"id hint: vendors",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),"\nasset index.bundle.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"8.92")," KiB ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"compared ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"for")," emit",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"name: index",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),"\nasset another.bundle.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"8.8")," KiB ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"compared ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"for")," emit",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"name: another",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),"\nEntrypoint index ",(0,t.kt)("span",{className:"token number",parentName:"code"},"558")," KiB ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," vendors-node_modules_lodash_lodash_js.bundle.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"549")," KiB index.bundle.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"8.92")," KiB\nEntrypoint another ",(0,t.kt)("span",{className:"token number",parentName:"code"},"558")," KiB ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," vendors-node_modules_lodash_lodash_js.bundle.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"549")," KiB another.bundle.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"8.8")," KiB\nruntime modules ",(0,t.kt)("span",{className:"token number",parentName:"code"},"7.64")," KiB ",(0,t.kt)("span",{className:"token number",parentName:"code"},"14")," modules\ncacheable modules ",(0,t.kt)("span",{className:"token number",parentName:"code"},"530")," KiB\n  ./src/index.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"257")," bytes ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"built",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"code generated",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\n  ./src/another-module.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"84")," bytes ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"built",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"code generated",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\n  ./node_modules/lodash/lodash.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"530")," KiB ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"built",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"code generated",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\nwebpack ",(0,t.kt)("span",{className:"token number",parentName:"code"},"5.4"),".0 compiled successfully ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"in")," ",(0,t.kt)("span",{className:"token number",parentName:"code"},"241")," ms")),(0,t.kt)("p",null,"다음은 코드 스플리팅을 위해 커뮤니티에서 제공하는 다른 유용한 플러그인과 로더입니다."),(0,t.kt)("p",null,"-",(0,t.kt)("a",{href:"/plugins/mini-css-extract-plugin",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"mini-css-extract-plugin"))," : 메인 애플리케이션에서 CSS를 분리하는데 유용합니다."),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"dynamic-imports",parentName:"h2"}),"Dynamic Imports",(0,t.kt)("a",{href:"#dynamic-imports","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"webpack은 동적 코드 스플리팅에 두 가지 유사한 기술을 지원합니다. 첫 번째이자 권장하는 접근 방식은 ",(0,t.kt)("a",{href:"https://github.com/tc39/proposal-dynamic-import",parentName:"p"},"ECMAScript 제안을")," 준수하는 ",(0,t.kt)("a",{href:"/api/module-methods/#import-1",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"import()"),"구문"),"을 사용하는 방식입니다. 기존의 webpack 전용 방식은 ",(0,t.kt)("a",{href:"/api/module-methods/#requireensure",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"require.ensure")),"를 사용하는 것입니다. 이 두 가지 중 첫 번째를 사용해 보겠습니다."),(0,t.kt)("aside",{className:"warning"},(0,t.kt)("h6",{className:"warning__prefix",parentName:"aside"},"warning"),(0,t.kt)("p",{parentName:"aside"},(0,t.kt)("inlineCode",{parentName:"p"},"import()")," 호출은 내부적으로 ",(0,t.kt)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",parentName:"p"},"promises"),"를 사용합니다. 이전 브라우저(예: IE 11)에서 ",(0,t.kt)("inlineCode",{parentName:"p"},"import()"),"를 사용하는 경우 ",(0,t.kt)("a",{href:"https://github.com/stefanpenner/es6-promise",parentName:"p"},"es6-promise"),"나 ",(0,t.kt)("a",{href:"https://github.com/taylorhakes/promise-polyfill",parentName:"p"},"promise-polyfill"),"과 같은 폴리필을 사용하여 ",(0,t.kt)("inlineCode",{parentName:"p"},"Promise"),"를 지원하도록 해야 합니다.")),(0,t.kt)("p",null,"시작하기 전에 위 예제의 설정에서 추가 ",(0,t.kt)("a",{href:"/concepts/entry-points/",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"entry"))," 및 ",(0,t.kt)("a",{href:"/plugins/split-chunks-plugin",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"optimization.splitChunks")),"를 제거하겠습니다. 다음 데모에는 필요하지 않습니다."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"const path = require('path');\n")),"\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"module.exports = {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"  mode: 'development',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"  entry: {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"    index: './src/index.js',\n")),(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    another: './src/another-module.js',\n")),(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"  },\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"  output: {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"    filename: '[name].bundle.js',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"    path: path.resolve(__dirname, 'dist'),\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"  },\n")),(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"  optimization: {\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    splitChunks: {\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"      chunks: 'all',\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    },\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"  },\n")),(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"};")))),(0,t.kt)("p",null,"또한 현재 사용하지 않는 파일을 프로젝트에서 제거하겠습니다."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"project")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},"webpack-demo\n|- package.json\n|- package-lock.json\n|- webpack.config.js\n|- /dist\n|- /src\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," |- index.js\n")),(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"}," |- another-module.js\n")),"|- /node_modules")),(0,t.kt)("p",null,"이제 정적으로 가져오던 ",(0,t.kt)("inlineCode",{parentName:"p"},"lodash"),"를 동적으로 가져와서 청크를 분리해보겠습니다."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"src/index.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"import _ from 'lodash';\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"function component() {\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"function getComponent() {\n")),(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"  const element = document.createElement('div');\n")),"\n",(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"  // Lodash, now imported by this script\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"  element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"  return import('lodash')\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    .then(({ default: _ }) => {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"      const element = document.createElement('div');\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"      element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n")),"\n",(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"  return element;\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"      return element;\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    })\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    .catch((error) => 'An error occurred while loading the component');\n")),(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"}\n")),"\n",(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"document.body.appendChild(component());\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"getComponent().then((component) => {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"  document.body.appendChild(component);\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"});")))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"default"),"가 필요한 이유는 webpack 4 이후로 CommonJS 모듈을 가져올 때 더 이상 ",(0,t.kt)("inlineCode",{parentName:"p"},"module.exports")," 값 으로 해석되지 않으며 대신 CommonJS 모듈에 대한 인공 네임 스페이스 객체를 생성하기 때문입니다. 그 이유에 대한 자세한 내용은 ",(0,t.kt)("a",{href:"https://medium.com/webpack/webpack-4-import-and-commonjs-d619d626b655",parentName:"p"},"webpack 4: import() 및 CommonJs"),"를 참고하세요."),(0,t.kt)("p",null,"webpack을 실행하여 ",(0,t.kt)("inlineCode",{parentName:"p"},"lodash"),"가 별도의 번들로 분리되어 있는지 살펴보겠습니다."),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-bash",parentName:"pre"},(0,t.kt)("span",{className:"token punctuation",parentName:"code"},".."),".\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"webpack-cli",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," Compilation finished\nasset vendors-node_modules_lodash_lodash_js.bundle.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"549")," KiB ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"compared ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"for")," emit",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"id hint: vendors",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),"\nasset index.bundle.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"13.5")," KiB ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"compared ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"for")," emit",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"name: index",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),"\nruntime modules ",(0,t.kt)("span",{className:"token number",parentName:"code"},"7.37")," KiB ",(0,t.kt)("span",{className:"token number",parentName:"code"},"11")," modules\ncacheable modules ",(0,t.kt)("span",{className:"token number",parentName:"code"},"530")," KiB\n  ./src/index.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"434")," bytes ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"built",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"code generated",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\n  ./node_modules/lodash/lodash.js ",(0,t.kt)("span",{className:"token number",parentName:"code"},"530")," KiB ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"built",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"code generated",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\nwebpack ",(0,t.kt)("span",{className:"token number",parentName:"code"},"5.4"),".0 compiled successfully ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"in")," ",(0,t.kt)("span",{className:"token number",parentName:"code"},"268")," ms")),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"import()"),"는 promise를 반환하므로 ",(0,t.kt)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"async")," 함수"),"와 함께 사용할 수 있습니다. 코드를 단순화하는 방법은 다음과 같습니다."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"src/index.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"function getComponent() {\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"async function getComponent() {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"  const element = document.createElement('div');\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"  const { default: _ } = await import('lodash');\n")),"\n",(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"  return import('lodash')\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    .then(({ default: _ }) => {\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"      const element = document.createElement('div');\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"  element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n")),"\n",(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"      element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"      return element;\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    })\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"    .catch((error) => 'An error occurred while loading the component');\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"  return element;\n")),(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"}\n")),"\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"getComponent().then((component) => {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"  document.body.appendChild(component);\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"});")))),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"tip"),(0,t.kt)("p",{parentName:"aside"},"나중에 계산된 변수를 기반으로 특정 모듈을 가져와야 할 경우 ",(0,t.kt)("inlineCode",{parentName:"p"},"import()"),"에 ",(0,t.kt)("a",{href:"/api/module-methods/#dynamic-expressions-in-import",parentName:"p"},"dynamic expression"),"을 사용 할 수 있습니다.")),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"prefetchingpreloading-modules",parentName:"h2"}),"Prefetching/Preloading modules",(0,t.kt)("a",{href:"#prefetchingpreloading-modules","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack 4.6.0+에서 프리페치 및 프리로드에 대한 지원이 추가되었습니다."),(0,t.kt)("p",null,'모듈을 가져올 때 인라인 지시문을 사용하면 webpack이 브라우저에 아래와 같은 "리소스 힌트"를 줄 수 있습니다.'),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("strong",{parentName:"li"},"prefetch")," : 향후 일부 탐색에 리소스가 필요할 수 있습니다."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("strong",{parentName:"li"},"preload")," : 현재 탐색 중에 리소스도 필요합니다.")),(0,t.kt)("p",null,"간단한 프리페치의 예제를 들어보겠습니다. ",(0,t.kt)("inlineCode",{parentName:"p"},"HomePage")," 컴포넌트에서 ",(0,t.kt)("inlineCode",{parentName:"p"},"LoginButton")," 컴포넌트를 렌더링하고, 이 컴포넌트를 클릭하면 ",(0,t.kt)("inlineCode",{parentName:"p"},"LoginModal")," 컴포넌트를 요청하여 로드하는 경우입니다."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"LoginButton.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,t.kt)("span",{className:"token comment",parentName:"code"},"//..."),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token comment",parentName:"code"},"/* webpackPrefetch: true */")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./path/to/LoginModal.js'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"이는 페이지 head에 ",(0,t.kt)("inlineCode",{parentName:"p"},'<link rel="prefetch" href="login-modal-chunk.js">'),"를 추가하고 브라우저에 ",(0,t.kt)("inlineCode",{parentName:"p"},"login-modal-chunk.js"),"를 유휴 시간에 미리 가져오도록 지시합니다."),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"tip"),(0,t.kt)("p",{parentName:"aside"},"webpack은 부모 청크가 로드된 후 프리페치 힌트를 추가합니다.")),(0,t.kt)("p",null,"프리로드 지시문은 프리페치와 비교했을 때 여러 가지 차이점이 있습니다."),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"프리로드 청크는 부모 청크와 병렬로 로드를 시작합니다. 프리페치 청크는 부모 청크가 로드 완료된 후에 로드를 시작합니다."),(0,t.kt)("li",{parentName:"ul"},"프리로드 청크는 중간 우선순위를 가지며 즉시 다운로드됩니다. 프리페치 청크는 브라우저가 유휴 상태일 때 다운로드 됩니다."),(0,t.kt)("li",{parentName:"ul"},"프리로드 청크는 부모 청크에서 즉시 요청 되어야 합니다. 프리페치 청크는 나중에 언제라도 사용할 수 있습니다."),(0,t.kt)("li",{parentName:"ul"},"지원하는 브라우저에 차이가 있습니다.")),(0,t.kt)("p",null,"간단한 프리로드의 예로는, 별도의 청크에 있어야 하는 큰 라이브러리에 항상 의존하는 ",(0,t.kt)("inlineCode",{parentName:"p"},"Component"),"를 생각해 볼 수 있습니다."),(0,t.kt)("p",null,"거대한 ",(0,t.kt)("inlineCode",{parentName:"p"},"ChartingLibrary"),"가 필요한 ",(0,t.kt)("inlineCode",{parentName:"p"},"ChartComponent"),"를 상상해 봅시다. 렌더링 될 때 ",(0,t.kt)("inlineCode",{parentName:"p"},"LoadingIndicator"),"를 표시하고 즉시 ",(0,t.kt)("inlineCode",{parentName:"p"},"ChartingLibrary"),"를 요청하여 불러옵니다."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"ChartComponent.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,t.kt)("span",{className:"token comment",parentName:"code"},"//..."),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token comment",parentName:"code"},"/* webpackPreload: true */")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'ChartingLibrary'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"ChartComponent"),"를 사용하는 페이지를 요청할 때 ",(0,t.kt)("inlineCode",{parentName:"p"},'<link rel="preload">'),"를 통해 charting-library-chunk도 요청됩니다. page-chunk가 더 작고 더 빨리 완료된다고 가정하면 이미 요청된 ",(0,t.kt)("inlineCode",{parentName:"p"},"charting-library-chunk"),"가 완료될 때까지 페이지에는 ",(0,t.kt)("inlineCode",{parentName:"p"},"LoadingIndicator"),"가 표시됩니다. 두 번이 아닌 한 번의 라운드 트립이 필요하므로 대기 시간이 긴 환경에서 로드 시간이 증가할 수 있습니다."),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"tip"),(0,t.kt)("p",{parentName:"aside"},(0,t.kt)("inlineCode",{parentName:"p"},"webpackPreload"),"를 잘못 사용하면 실제로 성능이 저하 될 수 있으므로 사용 시 주의하세요.")),(0,t.kt)("p",null,"때로는 프리로드에 대한 자신만의 제어가 필요합니다. 예를 들어 모든 동적 import의 프리로드는 비동기 스크립트를 통해 수행할 수 있습니다. 이는 서버사이드 랜더링을 스트리밍할 때 유용합니다."),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"const")," ",(0,t.kt)("span",{className:"token function-variable function",parentName:"code"},"lazyComp")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>"),"\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'DynamicComponent'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"catch"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"error"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 에러가 있는 작업을 수행합니다."),"\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 예를 들어, 모든 네트워크 에러가 발생할 경우 요청을 재시도할 수 있습니다."),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"Webpack이 해당 스크립트의 자체 로드를 시작하기 전에 스크립트 로드가 실패하면(Webpack은 해당 스크립트가 페이지에 없는 경우 해당 코드를 로드하기 위해 스크립트 태그를 생성함), 해당 catch 핸들러는 ",(0,t.kt)("a",{href:"/configuration/output/#outputchunkloadtimeout",parentName:"p"},"chunkLoadTimeout"),"에 전달되지 않습니다. 이 동작은 예기치 않은 것일 수 있습니다. 하지만 설명 가능합니다. Webpack은 해당 스크립트가 실패했다는 것을 모르기 때문에 에러를 발생시킬 수 없습니다. Webpack은 에러가 발생한 후 즉시 onerror 핸들러를 스크립트에 추가합니다."),(0,t.kt)("p",null,"이러한 문제를 방지하기 위해, 에러 발생 시 스크립트를 제거하는 자체 onerror 핸들러를 추가할 수 있습니다."),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-html",parentName:"pre"},(0,t.kt)("span",{className:"token tag",parentName:"code"},(0,t.kt)("span",{className:"token tag",parentName:"span"},(0,t.kt)("span",{className:"token punctuation",parentName:"span"},"<"),"script"),"\n  ",(0,t.kt)("span",{className:"token attr-name",parentName:"span"},"src"),(0,t.kt)("span",{className:"token attr-value",parentName:"span"},(0,t.kt)("span",{className:"token punctuation attr-equals",parentName:"span"},"="),(0,t.kt)("span",{className:"token punctuation",parentName:"span"},'"'),"https://example.com/dist/dynamicComponent.js",(0,t.kt)("span",{className:"token punctuation",parentName:"span"},'"')),"\n  ",(0,t.kt)("span",{className:"token attr-name",parentName:"span"},"async"),"\n  ",(0,t.kt)("span",{className:"token attr-name",parentName:"span"},"onerror"),(0,t.kt)("span",{className:"token attr-value",parentName:"span"},(0,t.kt)("span",{className:"token punctuation attr-equals",parentName:"span"},"="),(0,t.kt)("span",{className:"token punctuation",parentName:"span"},'"'),"this.remove()",(0,t.kt)("span",{className:"token punctuation",parentName:"span"},'"')),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"span"},">")),(0,t.kt)("span",{className:"token script",parentName:"code"}),(0,t.kt)("span",{className:"token tag",parentName:"code"},(0,t.kt)("span",{className:"token tag",parentName:"span"},(0,t.kt)("span",{className:"token punctuation",parentName:"span"},"</"),"script"),(0,t.kt)("span",{className:"token punctuation",parentName:"span"},">")))),(0,t.kt)("p",null,"이 경우 에러가 있는 스크립트는 제거됩니다. Webpack은 자체 스크립트를 생성하고 모든 에러는 시간 초과 없이 처리됩니다."),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"bundle-analysis",parentName:"h2"}),"Bundle Analysis",(0,t.kt)("a",{href:"#bundle-analysis","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"코드 스플리팅을 시작하면 출력을 분석하여 어디서 모듈이 종료되었는지 확인하는 데 유용합니다. ",(0,t.kt)("a",{href:"https://github.com/webpack/analyse",parentName:"p"},"공식 분석 도구"),"부터 시작하는 것이 좋습니다. 커뮤니티에서 지원하는 다른 옵션도 있습니다."),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{href:"https://alexkuz.github.io/webpack-chart/",parentName:"li"},"webpack-chart"),": webpack 통계를 위한 인터렉티브 원형 차트."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{href:"https://chrisbateman.github.io/webpack-visualizer/",parentName:"li"},"webpack-visualizer"),": 번들을 시각화하고 분석하여 어떤 모듈이 공간을 차지하고 있고 어떤 모듈이 중복될 수 있는지 확인합니다."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{href:"https://github.com/webpack-contrib/webpack-bundle-analyzer",parentName:"li"},"webpack-bundle-analyzer"),": 확대/축소 가능한 편리한 인터렉티브 트리 맵으로 번들 콘텐츠를 표현하는 플러그인 및 CLI 유틸리티입니다."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{href:"https://webpack.jakoblind.no/optimize",parentName:"li"},"webpack bundle optimize helper"),": 이 도구는 번들을 분석하고 번들 크기를 줄이기 위한 실용적인 개선 사항을 제공합니다."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{href:"https://github.com/bundle-stats/bundle-stats",parentName:"li"},"bundle-stats"),": 번들 보고서(번들 크기, 애셋, 모듈)를 생성하고 서로 다른 빌드 간의 결과를 비교합니다.")),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"next-steps",parentName:"h2"}),"Next Steps",(0,t.kt)("a",{href:"#next-steps","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"실제 애플리케이션에서 어떻게 ",(0,t.kt)("inlineCode",{parentName:"p"},"import()"),"를 사용하는지 더 구체적으로 알고 싶다면 ",(0,t.kt)("a",{href:"/guides/lazy-loading/",parentName:"p"},"Lazy Loading"),"의 예제를 확인하세요. 더 효율적인 코드 스플리팅 방법은 ",(0,t.kt)("a",{href:"/guides/caching/",parentName:"p"},"Caching"),"을 참고하세요."))}p.isMDXComponent=!0,a.default=p}}]);