"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6002],{6002:function(e,a,n){n.r(a),n(7378);var t=n(2682);function s(){return s=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},s.apply(this,arguments)}function p(e){let{components:a,...n}=e;return(0,t.kt)("wrapper",s({components:a},n),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"tip"),(0,t.kt)("p",{parentName:"aside"},"이 가이드는 ",(0,t.kt)("a",{href:"/guides/code-splitting",parentName:"p"},"코드 스플리팅"),"에 대한 작은 후속 작업입니다. 해당 가이드를 아직 읽지 않았다면, 지금 읽어보세요.")),(0,t.kt)("p",null,'지연 로딩 또는 "온 디맨드" 로딩은 사이트나 애플리케이션을 최적화하는 좋은 방법입니다. 이 방법은 기본적으로 논리적인 중단점에서 코드를 분할한 다음 유저가 새로운 코드 블록을 요구하거나 필요로 하는 작업을 수행한 후 코드를 로딩하는 것입니다. 이렇게 하면 애플리케이션의 초기 로드 속도가 빨라지고 일부 블록이 로드되지 않을 수도 있어서 전체 무게가 줄어 듭니다.'),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"example",parentName:"h2"}),"Example",(0,t.kt)("a",{href:"#example","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("a",{href:"/guides/code-splitting/#dynamic-imports",parentName:"p"},"코드 스플리팅"),"의 예제를 가져와 이 개념을 더욱 잘 보여주기 위해 약간 수정해 보겠습니다. 이 코드는 별도의 청크인 ",(0,t.kt)("inlineCode",{parentName:"p"},"lodash.bundle.js"),'를 생성하고 스크립트가 실행되자마자 기술적으로 "지연 로드"됩니다. 문제는 번들을 로드하는데 유저 상호 작용이 필요하지 않다는 것입니다. 즉, 페이지가 로드 될 때마다 요청이 실행됩니다. 이것은 우리에게 큰 도움이 되지 않고 성능에 부정적인 영향을 미치게 됩니다.'),(0,t.kt)("p",null,"다른 것을 시도해 봅시다. 유저가 버튼을 클릭 할 때 일부 텍스트를 콘솔에 기록하는 상호 작용을 추가합니다. 그러나 (",(0,t.kt)("inlineCode",{parentName:"p"},"print.js"),")를 로드하는 동안 처음 상호작용이 발생하기까지 기다려보겠습니다. 이를 위해 다시 돌아가서 ",(0,t.kt)("em",{parentName:"p"},"코드 스플리팅의")," ",(0,t.kt)("a",{href:"/guides/code-splitting/#dynamic-imports",parentName:"p"},"final ",(0,t.kt)("em",{parentName:"a"},"Dynamic Imports")," 예제를")," 다시 작업하고 메인 청크에 ",(0,t.kt)("inlineCode",{parentName:"p"},"lodash"),"를 남겨 둡니다."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"프로젝트")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},"webpack-demo\n|- package.json\n|- package-lock.json\n|- webpack.config.js\n|- /dist\n|- /src\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," |- index.js\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," |- print.js\n")),"|- /node_modules")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"src/print.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"console",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"log"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"\n  ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'The print.js module has loaded! See the network tab in dev tools...'"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"default")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  console",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"log"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'Button Clicked: Here\\'s \"some text\"!'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"src/index.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," import _ from 'lodash';\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"\n")),(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"}," async function getComponent() {\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," function component() {\n")),(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   const element = document.createElement('div');\n")),(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   const _ = await import(/* webpackChunkName: \"lodash\" */ 'lodash');\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   const button = document.createElement('button');\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   const br = document.createElement('br');\n")),"\n",(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   button.innerHTML = 'Click me and look at the console!';\n")),(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   element.appendChild(br);\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   element.appendChild(button);\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   // Note that because a network request is involved, some indication\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   // of loading would need to be shown in a production-level site/app.\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   button.onclick = e => import(/* webpackChunkName: \"print\" */ './print').then(module => {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"     const print = module.default;\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"     print();\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   });\n")),"\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   return element;\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," }\n")),"\n",(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"}," getComponent().then(component => {\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   document.body.appendChild(component);\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"}," });\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," document.body.appendChild(component());")))),(0,t.kt)("aside",{className:"warning"},(0,t.kt)("h6",{className:"warning__prefix",parentName:"aside"},"warning"),(0,t.kt)("p",{parentName:"aside"},"ES6 모듈에서 ",(0,t.kt)("inlineCode",{parentName:"p"},"import()")," 를 사용할 때 promise가 해결 될 때 반환되는 실제 ",(0,t.kt)("inlineCode",{parentName:"p"},"module")," 객체이므로 ",(0,t.kt)("inlineCode",{parentName:"p"},".default")," 속성을 참조해야 합니다.")),(0,t.kt)("p",null,"이제 webpack을 실행하고 새로운 지연 로딩 기능을 확인해 보겠습니다."),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-bash",parentName:"pre"},(0,t.kt)("span",{className:"token punctuation",parentName:"code"},".."),".\n          Asset       Size  Chunks                    Chunk Names\nprint.bundle.js  ",(0,t.kt)("span",{className:"token number",parentName:"code"},"417")," bytes       ",(0,t.kt)("span",{className:"token number",parentName:"code"},"0"),"  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"emitted",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"         print\nindex.bundle.js     ",(0,t.kt)("span",{className:"token number",parentName:"code"},"548")," kB       ",(0,t.kt)("span",{className:"token number",parentName:"code"},"1"),"  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"emitted",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"big",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"  index\n     index.html  ",(0,t.kt)("span",{className:"token number",parentName:"code"},"189")," bytes          ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"emitted",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},".."),".")),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"frameworks",parentName:"h2"}),"Frameworks",(0,t.kt)("a",{href:"#frameworks","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"많은 프레임워크와 라이브러리에는 방법론 안에서 구현하는 방법에 대한 자체 권고안이 있습니다. 다음은 몇 가지 예시입니다."),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"React: ",(0,t.kt)("a",{href:"https://reactjs.org/docs/code-splitting.html",parentName:"li"},"Code Splitting and Lazy Loading")),(0,t.kt)("li",{parentName:"ul"},"Vue: ",(0,t.kt)("a",{href:"https://vuedose.tips/tips/dynamic-imports-in-vue-js-for-better-performance/",parentName:"li"},"Dynamic Imports in Vue.js for better performance")),(0,t.kt)("li",{parentName:"ul"},"Angular: ",(0,t.kt)("a",{href:"https://angular.io/guide/router#milestone-6-asynchronous-routing",parentName:"li"},"Lazy Loading route configuration")," 그리고 ",(0,t.kt)("a",{href:"https://medium.com/@var_bin/angularjs-webpack-lazyload-bb7977f390dd",parentName:"li"},"AngularJS + webpack = lazyLoad"))))}p.isMDXComponent=!0,a.default=p}}]);