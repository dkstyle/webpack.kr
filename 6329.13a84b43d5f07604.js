"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6329],{6329:function(e,a,n){n.r(a),n(3696);var s=n(1445);function p(){return p=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},p.apply(this,arguments)}function t(e){let{components:a,...n}=e;return(0,s.yg)("wrapper",p({components:a},n),(0,s.yg)("aside",{className:"tip"},(0,s.yg)("h6",{className:"tip__prefix",parentName:"aside"},"tip"),(0,s.yg)("p",{parentName:"aside"},"이 가이드는 ",(0,s.yg)("a",{href:"/guides/getting-started/",parentName:"p"},(0,s.yg)("em",{parentName:"a"},"시작하기"))," 가이드에서 파생했습니다.")),(0,s.yg)("p",null,(0,s.yg)("a",{href:"https://www.typescriptlang.org",parentName:"p"},"TypeScript는")," 일반 JavaScript로 컴파일되고 타입이 있는 상위 집합입니다. 이 가이드에서는 TypeScript를 webpack과 통합하는 방법에 대해 알아보겠습니다."),(0,s.yg)("h2",null,(0,s.yg)("span",{id:"basic-setup",parentName:"h2"}),"Basic Setup",(0,s.yg)("a",{href:"#basic-setup","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.yg)("span",{className:"header-link",parentName:"a"}))),(0,s.yg)("p",null,"먼저 다음을 실행하여 TypeScript 컴파일러와 로더를 설치하세요."),(0,s.yg)("pre",null,(0,s.yg)("code",{className:"hljs language-bash",parentName:"pre"},(0,s.yg)("span",{className:"token function",parentName:"code"},"npm")," ",(0,s.yg)("span",{className:"token function",parentName:"code"},"install")," --save-dev typescript ts-loader")),(0,s.yg)("p",null,"이제 디렉터리 구조와 설정 파일을 수정합니다."),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"project")),(0,s.yg)("pre",null,(0,s.yg)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.yg)("span",{className:"token unchanged",parentName:"code"},(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," webpack-demo\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," |- package.json\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," |- package-lock.json\n")),(0,s.yg)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"}," |- tsconfig.json\n")),(0,s.yg)("span",{className:"token unchanged",parentName:"code"},(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," |- webpack.config.js\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," |- /dist\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"   |- bundle.js\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"   |- index.html\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," |- /src\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"   |- index.js\n")),(0,s.yg)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"},"   |- index.ts\n")),(0,s.yg)("span",{className:"token unchanged",parentName:"code"},(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," |- /node_modules")))),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"tsconfig.json")),(0,s.yg)("p",null,"JSX를 지원하도록 간단하게 설정하고 TypeScript를 ES5로 컴파일 합니다."),(0,s.yg)("pre",null,(0,s.yg)("code",{className:"hljs language-json",parentName:"pre"},(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,s.yg)("span",{className:"token property",parentName:"code"},'"compilerOptions"'),(0,s.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    ",(0,s.yg)("span",{className:"token property",parentName:"code"},'"outDir"'),(0,s.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.yg)("span",{className:"token string",parentName:"code"},'"./dist/"'),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,s.yg)("span",{className:"token property",parentName:"code"},'"noImplicitAny"'),(0,s.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.yg)("span",{className:"token boolean",parentName:"code"},"true"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,s.yg)("span",{className:"token property",parentName:"code"},'"module"'),(0,s.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.yg)("span",{className:"token string",parentName:"code"},'"es6"'),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,s.yg)("span",{className:"token property",parentName:"code"},'"target"'),(0,s.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.yg)("span",{className:"token string",parentName:"code"},'"es5"'),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,s.yg)("span",{className:"token property",parentName:"code"},'"jsx"'),(0,s.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.yg)("span",{className:"token string",parentName:"code"},'"react"'),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,s.yg)("span",{className:"token property",parentName:"code"},'"allowJs"'),(0,s.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.yg)("span",{className:"token boolean",parentName:"code"},"true"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,s.yg)("span",{className:"token property",parentName:"code"},'"moduleResolution"'),(0,s.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.yg)("span",{className:"token string",parentName:"code"},'"node"'),"\n  ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"}"),"\n",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"}"))),(0,s.yg)("p",null,(0,s.yg)("inlineCode",{parentName:"p"},"tsconfig.json")," 설정 옵션에 대한 자세한 내용은 ",(0,s.yg)("a",{href:"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html",parentName:"p"},"TypeScript 문서를")," 참고하세요."),(0,s.yg)("p",null,"webpack 설정에 대한 자세한 내용은 ",(0,s.yg)("a",{href:"/concepts/configuration/",parentName:"p"},"설정 콘셉트를")," 참고하세요."),(0,s.yg)("p",null,"이제 TypeScript를 처리하도록 webpack을 설정해 보겠습니다."),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"webpack.config.js")),(0,s.yg)("pre",null,(0,s.yg)("code",{className:"hljs language-js",parentName:"pre"},(0,s.yg)("span",{className:"token keyword",parentName:"code"},"const")," path ",(0,s.yg)("span",{className:"token operator",parentName:"code"},"=")," ",(0,s.yg)("span",{className:"token function",parentName:"code"},"require"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"("),(0,s.yg)("span",{className:"token string",parentName:"code"},"'path'"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},")"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},";"),"\n\nmodule",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,s.yg)("span",{className:"token operator",parentName:"code"},"=")," ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  entry",(0,s.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.yg)("span",{className:"token string",parentName:"code"},"'./src/index.ts'"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  module",(0,s.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    rules",(0,s.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"["),"\n      ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n        test",(0,s.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.yg)("span",{className:"token regex",parentName:"code"},"/\\.tsx?$/"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n        use",(0,s.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.yg)("span",{className:"token string",parentName:"code"},"'ts-loader'"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n        exclude",(0,s.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.yg)("span",{className:"token regex",parentName:"code"},"/node_modules/"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"]"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  resolve",(0,s.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    extensions",(0,s.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"["),(0,s.yg)("span",{className:"token string",parentName:"code"},"'.tsx'"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,s.yg)("span",{className:"token string",parentName:"code"},"'.ts'"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,s.yg)("span",{className:"token string",parentName:"code"},"'.js'"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"]"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  output",(0,s.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    filename",(0,s.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.yg)("span",{className:"token string",parentName:"code"},"'bundle.js'"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n    path",(0,s.yg)("span",{className:"token operator",parentName:"code"},":")," path",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"."),(0,s.yg)("span",{className:"token function",parentName:"code"},"resolve"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"("),"__dirname",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,s.yg)("span",{className:"token string",parentName:"code"},"'dist'"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},")"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},";"))),(0,s.yg)("p",null,"이렇게하면 webpack이 ",(0,s.yg)("inlineCode",{parentName:"p"},"./index.ts")," 를 통해 진입하고, ",(0,s.yg)("inlineCode",{parentName:"p"},"ts-loader"),"를 통해 모든 ",(0,s.yg)("inlineCode",{parentName:"p"},".ts")," 및 ",(0,s.yg)("inlineCode",{parentName:"p"},".tsx")," 파일을 로드합니다. 그리고 현재 디렉터리에 ",(0,s.yg)("inlineCode",{parentName:"p"},"bundle.js"),"파일을 출력합니다."),(0,s.yg)("p",null,(0,s.yg)("inlineCode",{parentName:"p"},"lodash"),"의 정의에는 기본 export 표현이 없기 때문에, 이제 ",(0,s.yg)("inlineCode",{parentName:"p"},"./index.ts"),"의 ",(0,s.yg)("inlineCode",{parentName:"p"},"lodash"),"를 import하는 부분을 변경해 보겠습니다."),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"./index.ts")),(0,s.yg)("pre",null,(0,s.yg)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.yg)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,s.yg)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.yg)("span",{className:"token line",parentName:"span"}," import _ from 'lodash';\n")),(0,s.yg)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"}," import * as _ from 'lodash';\n")),"\n",(0,s.yg)("span",{className:"token unchanged",parentName:"code"},(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," function component() {\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"   const element = document.createElement('div');\n")),"\n",(0,s.yg)("span",{className:"token unchanged",parentName:"code"},(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"   element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n")),"\n",(0,s.yg)("span",{className:"token unchanged",parentName:"code"},(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"   return element;\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," }\n")),"\n",(0,s.yg)("span",{className:"token unchanged",parentName:"code"},(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," document.body.appendChild(component());")))),(0,s.yg)("aside",{className:"tip"},(0,s.yg)("h6",{className:"tip__prefix",parentName:"aside"},"tip"),(0,s.yg)("p",{parentName:"aside"},"import 부분에서 기본적으로 이 작업을 하도록 하고 TypeScript에서 ",(0,s.yg)("inlineCode",{parentName:"p"},"import _ from 'lodash';")," 문법을 유지하기 위해 ",(0,s.yg)("strong",{parentName:"p"},"tsconfig.json")," 파일에 ",(0,s.yg)("inlineCode",{parentName:"p"},'"allowSyntheticDefaultImports" : true')," 와 ",(0,s.yg)("inlineCode",{parentName:"p"},'"esModuleInterop" : true'),"로 설정 합니다. 이는 TypeScript 설정과 연관이 있기때문에 이 가이드에서는 정보를 제공하기 위해서만 언급하겠습니다.")),(0,s.yg)("h2",null,(0,s.yg)("span",{id:"loader",parentName:"h2"}),"Loader",(0,s.yg)("a",{href:"#loader","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.yg)("span",{className:"header-link",parentName:"a"}))),(0,s.yg)("p",null,(0,s.yg)("a",{href:"https://github.com/TypeStrong/ts-loader",parentName:"p"},(0,s.yg)("inlineCode",{parentName:"a"},"ts-loader"))),(0,s.yg)("p",null,"이 가이드에서는 ",(0,s.yg)("inlineCode",{parentName:"p"},"ts-loader"),"를 사용하여 다른 웹 애셋 import 같은 추가적인 webpack 기능을 조금 더 쉽게 활성화 할 수 있습니다."),(0,s.yg)("aside",{className:"warning"},(0,s.yg)("h6",{className:"warning__prefix",parentName:"aside"},"warning"),(0,s.yg)("p",{parentName:"aside"},(0,s.yg)("inlineCode",{parentName:"p"},"ts-loader")," 는 TypeScript 컴파일러인 ",(0,s.yg)("inlineCode",{parentName:"p"},"tsc"),"를 사용하고, ",(0,s.yg)("inlineCode",{parentName:"p"},"tsconfig.json"),"의 설정을 따릅니다. ",(0,s.yg)("a",{href:"https://www.typescriptlang.org/tsconfig#module",parentName:"p"},(0,s.yg)("inlineCode",{parentName:"a"},"모듈을")),' "CommonJS"로 설정하지 않도록 주의하세요. 안그러면 webpack이 ',(0,s.yg)("a",{href:"/guides/tree-shaking",parentName:"p"},"코드 tree-shake를")," 할 수 없습니다.")),(0,s.yg)("p",null,"이미 ",(0,s.yg)("a",{href:"https://github.com/babel/babel-loader",parentName:"p"},(0,s.yg)("inlineCode",{parentName:"a"},"babel-loader"),"를")," 사용하여 코드를 트랜스파일 하는 경우라면 ",(0,s.yg)("a",{href:"https://babeljs.io/docs/en/babel-preset-typescript",parentName:"p"},(0,s.yg)("inlineCode",{parentName:"a"},"@babel/preset-typescript")),"를 사용하여 Babel이 추가 로더를 사용하는 대신 JavaScript와 TypeScript 파일을 모두 처리하도록 합니다. ",(0,s.yg)("inlineCode",{parentName:"p"},"ts-loader"),"와 달리, 기본 ",(0,s.yg)("a",{href:"https://babeljs.io/docs/en/babel-plugin-transform-typescript",parentName:"p"},(0,s.yg)("inlineCode",{parentName:"a"},"@babel/plugin-transform-typescript"))," 플러그인은 어떠한 타입 검사도 수행하지 않습니다."),(0,s.yg)("h2",null,(0,s.yg)("span",{id:"source-maps",parentName:"h2"}),"Source Maps",(0,s.yg)("a",{href:"#source-maps","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.yg)("span",{className:"header-link",parentName:"a"}))),(0,s.yg)("p",null,"소스맵에 대한 자세한 내용은 ",(0,s.yg)("a",{href:"/guides/development",parentName:"p"},"개발 가이드를")," 참고하세요."),(0,s.yg)("p",null,"소스맵을 사용하려면 TypeScript가 컴파일된 JavaScript 파일로 인라인 소스맵을 출력하도록 설정해야 합니다. TypeScript 설정에 다음 내용을 꼭 추가해야합니다."),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"tsconfig.json")),(0,s.yg)("pre",null,(0,s.yg)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.yg)("span",{className:"token unchanged",parentName:"code"},(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," {\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},'   "compilerOptions": {\n'),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},'     "outDir": "./dist/",\n')),(0,s.yg)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"},'     "sourceMap": true,\n')),(0,s.yg)("span",{className:"token unchanged",parentName:"code"},(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},'     "noImplicitAny": true,\n'),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},'     "module": "commonjs",\n'),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},'     "target": "es5",\n'),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},'     "jsx": "react",\n'),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},'     "allowJs": true,\n'),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},'     "moduleResolution": "node",\n'),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"   }\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," }")))),(0,s.yg)("p",null,"이제 webpack에 이러한 소스맵을 추출해 최종 번들에 포함되도록 지시해야 합니다."),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"webpack.config.js")),(0,s.yg)("pre",null,(0,s.yg)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.yg)("span",{className:"token unchanged",parentName:"code"},(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," const path = require('path');\n")),"\n",(0,s.yg)("span",{className:"token unchanged",parentName:"code"},(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," module.exports = {\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"   entry: './src/index.ts',\n")),(0,s.yg)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.yg)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.yg)("span",{className:"token line",parentName:"span"},"   devtool: 'inline-source-map',\n")),(0,s.yg)("span",{className:"token unchanged",parentName:"code"},(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"   module: {\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"     rules: [\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"       {\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"         test: /\\.tsx?$/,\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"         use: 'ts-loader',\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"         exclude: /node_modules/,\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"       },\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"     ],\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"   },\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"   resolve: {\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"     extensions: [ '.tsx', '.ts', '.js' ],\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"   },\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"   output: {\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"     filename: 'bundle.js',\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"     path: path.resolve(__dirname, 'dist'),\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"},"   },\n"),(0,s.yg)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.yg)("span",{className:"token line",parentName:"span"}," };")))),(0,s.yg)("p",null,"자세한 내용은 ",(0,s.yg)("a",{href:"/configuration/devtool/",parentName:"p"},"개발자 도구 문서를")," 참고하세요."),(0,s.yg)("h2",null,(0,s.yg)("span",{id:"client-types",parentName:"h2"}),"Client types",(0,s.yg)("a",{href:"#client-types","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.yg)("span",{className:"header-link",parentName:"a"}))),(0,s.yg)("p",null,"TypeScript 코드에서 ",(0,s.yg)("a",{href:"/api/module-variables/#importmetawebpack",parentName:"p"},(0,s.yg)("inlineCode",{parentName:"a"},"import.meta.webpack")),"과 같은 webpack 관련 기능을 사용할 수 있습니다. 그리고 webpack은 이에 대한 타입도 제공합니다. TypeScript ",(0,s.yg)("a",{href:"https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html#-reference-types-",parentName:"p"},(0,s.yg)("inlineCode",{parentName:"a"},"reference"))," 지시문을 추가하여 선언하면 됩니다."),(0,s.yg)("pre",null,(0,s.yg)("code",{className:"hljs language-ts",parentName:"pre"},(0,s.yg)("span",{className:"token comment",parentName:"code"},'/// <reference types="webpack/module" />'),"\n",(0,s.yg)("span",{className:"token builtin",parentName:"code"},"console"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"."),(0,s.yg)("span",{className:"token function",parentName:"code"},"log"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"("),(0,s.yg)("span",{className:"token keyword",parentName:"code"},"import"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"."),"meta",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"."),"webpack",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},")"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},";")," ",(0,s.yg)("span",{className:"token comment",parentName:"code"},"// 위에서 선언된 참조가 없으면 TypeScript에서 에러가 발생합니다."))),(0,s.yg)("h2",null,(0,s.yg)("span",{id:"using-third-party-libraries",parentName:"h2"}),"Using Third Party Libraries",(0,s.yg)("a",{href:"#using-third-party-libraries","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.yg)("span",{className:"header-link",parentName:"a"}))),(0,s.yg)("p",null,"npm으로부터 타사 라이브러리를 설치할 때는 해당 라이브러리에 대한 타입 정의를 설치해야 한다는 사실을 기억해야 합니다."),(0,s.yg)("p",null,"예를 들어, lodash를 설치하려는 경우 다음 명령을 실행해서 타입을 가져올 수 있습니다."),(0,s.yg)("pre",null,(0,s.yg)("code",{className:"hljs language-bash",parentName:"pre"},(0,s.yg)("span",{className:"token function",parentName:"code"},"npm")," ",(0,s.yg)("span",{className:"token function",parentName:"code"},"install")," --save-dev @types/lodash")),(0,s.yg)("p",null,"npm 패키지가 이미 패키지 번들에 선언 유형을 포함하고 있는 경우 해당 ",(0,s.yg)("inlineCode",{parentName:"p"},"@types")," 패키지를 다운로드할 필요가 없습니다. 자세한 내용은 ",(0,s.yg)("a",{href:"https://github.blog/changelog/2020-12-16-npm-displays-packages-with-bundled-typescript-declarations/",parentName:"p"},"TypeScript 변경 로그 블로그"),"를 참고하세요."),(0,s.yg)("h2",null,(0,s.yg)("span",{id:"importing-other-assets",parentName:"h2"}),"Importing Other Assets",(0,s.yg)("a",{href:"#importing-other-assets","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.yg)("span",{className:"header-link",parentName:"a"}))),(0,s.yg)("p",null,"TypeScript와 함께 비코드 애셋을 사용하려면 이러한 import에 대한 타입을 연기해야 합니다. 이를 위해서 프로젝트에 TypeScript에 대한 사용자 정의를 나타내는 ",(0,s.yg)("inlineCode",{parentName:"p"},"custom.d.ts")," 파일이 필요합니다. ",(0,s.yg)("inlineCode",{parentName:"p"},".svg")," 파일에 대한 선언을 설정해 보겠습니다."),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"custom.d.ts")),(0,s.yg)("pre",null,(0,s.yg)("code",{className:"hljs language-typescript",parentName:"pre"},(0,s.yg)("span",{className:"token keyword",parentName:"code"},"declare")," ",(0,s.yg)("span",{className:"token keyword",parentName:"code"},"module")," ",(0,s.yg)("span",{className:"token string",parentName:"code"},"'*.svg'")," ",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,s.yg)("span",{className:"token keyword",parentName:"code"},"const")," content",(0,s.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.yg)("span",{className:"token builtin",parentName:"code"},"any"),(0,s.yg)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,s.yg)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,s.yg)("span",{className:"token keyword",parentName:"code"},"default")," content",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,s.yg)("span",{className:"token punctuation",parentName:"code"},"}"))),(0,s.yg)("p",null,"여기에서는 ",(0,s.yg)("inlineCode",{parentName:"p"},".svg"),"로 끝나는 import를 지정하고 모듈의 ",(0,s.yg)("inlineCode",{parentName:"p"},"content"),"를 ",(0,s.yg)("inlineCode",{parentName:"p"},"any"),"로 정의하여 SVG를 위한 새로운 모듈을 선언합니다. 타입을 문자열로 정의하여 URL이라는 것을 더 명확하게 할 수 있습니다. CSS, SCSS, JSON 등을 포함한 다른 애셋에도 동일한 개념이 적용됩니다."),(0,s.yg)("h2",null,(0,s.yg)("span",{id:"build-performance",parentName:"h2"}),"Build Performance",(0,s.yg)("a",{href:"#build-performance","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.yg)("span",{className:"header-link",parentName:"a"}))),(0,s.yg)("aside",{className:"warning"},(0,s.yg)("h6",{className:"warning__prefix",parentName:"aside"},"warning"),(0,s.yg)("p",{parentName:"aside"},"이로 인해 빌드 성능이 저하 될 수 있습니다.")),(0,s.yg)("p",null,"빌드 도구에 대한 ",(0,s.yg)("a",{href:"/guides/build-performance/",parentName:"p"},"빌드 성능 가이드를")," 참고하세요."))}t.isMDXComponent=!0,a.default=t}}]);