"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[866],{866:function(e,a,n){n.r(a),n(3696);var t=n(1445);function p(){return p=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},p.apply(this,arguments)}function s(e){let{components:a,...n}=e;return(0,t.yg)("wrapper",p({components:a},n),(0,t.yg)("p",null,"Webpack은 다양한 환경과 ",(0,t.yg)("em",{parentName:"p"},"target을")," 컴파일합니다. ",(0,t.yg)("inlineCode",{parentName:"p"},"target"),"이 무엇인지 자세히 이해하고 싶다면 ",(0,t.yg)("a",{href:"/concepts/targets/",parentName:"p"},"target의 개념에 대한 페이지"),"를 읽어보세요."),(0,t.yg)("h2",null,(0,t.yg)("span",{id:"target",parentName:"h2"}),"target",(0,t.yg)("a",{href:"#target","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.yg)("span",{className:"header-link",parentName:"a"}))),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"string")," ",(0,t.yg)("inlineCode",{parentName:"p"},"[string]")," ",(0,t.yg)("inlineCode",{parentName:"p"},"false")),(0,t.yg)("p",null,"특정 환경에 대한 런타임 코드를 생성하도록 webpack에 지시합니다. webpack 런타임 코드는 작성하는 사용자 코드와 동일하지 않습니다. 예를 들어 소스 코드에 화살표 함수가 있고 ES5 환경에서 번들된 코드를 실행하려면, Babel과 같은 트랜스파일러로 해당 코드를 트랜스파일해야 합니다. Webpack은 ",(0,t.yg)("inlineCode",{parentName:"p"},"target"),"이 구성된 상태에서는 자동으로 트랜스파일하지 않습니다."),(0,t.yg)("p",null,"browserslist 설정이 없으면 ",(0,t.yg)("inlineCode",{parentName:"p"},"'browserslist'")," 혹은 ",(0,t.yg)("inlineCode",{parentName:"p"},"'web'"),"으로 설정됩니다."),(0,t.yg)("h3",null,(0,t.yg)("span",{id:"string",parentName:"h3"}),"string",(0,t.yg)("a",{href:"#string","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.yg)("span",{className:"header-link",parentName:"a"}))),(0,t.yg)("p",null,"다음의 문자열은 ",(0,t.yg)("a",{href:"https://github.com/webpack/webpack/blob/main/lib/WebpackOptionsApply.js",parentName:"p"},(0,t.yg)("inlineCode",{parentName:"a"},"WebpackOptionsApply")),"를 통해서 지원됩니다."),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr"},"Option"),(0,t.yg)("th",{parentName:"tr"},"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{"data-th":"Option",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},(0,t.yg)("inlineCode",{parentName:"span"},"async-node[[X].Y]"))),(0,t.yg)("td",{"data-th":"Description",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},"Node.js와 유사한 환경에서 사용할 수 있도록 컴파일합니다 (",(0,t.yg)("inlineCode",{parentName:"span"},"fs"),"와 ",(0,t.yg)("inlineCode",{parentName:"span"},"vm"),"을 사용하여 청크를 비동기식으로 로드합니다.)"))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{"data-th":"Option",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},(0,t.yg)("inlineCode",{parentName:"span"},"electron[[X].Y]-main"))),(0,t.yg)("td",{"data-th":"Description",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},"메인 프로세스를 위해 ",(0,t.yg)("a",{href:"https://electronjs.org/",parentName:"span"},"Electron"),"으로 컴파일합니다."))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{"data-th":"Option",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},(0,t.yg)("inlineCode",{parentName:"span"},"electron[[X].Y]-renderer"))),(0,t.yg)("td",{"data-th":"Description",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},"렌더러 프로세스를 위해 ",(0,t.yg)("a",{href:"https://electronjs.org/",parentName:"span"},"Electron"),"으로 컴파일하여 ",(0,t.yg)("inlineCode",{parentName:"span"},"JsonpTemplatePlugin"),", 브라우저 환경을 위한 ",(0,t.yg)("inlineCode",{parentName:"span"},"FunctionModulePlugin"),", CommonJS와 Electron의 내장 모듈을 위한 ",(0,t.yg)("inlineCode",{parentName:"span"},"NodeTargetPlugin")," 및 ",(0,t.yg)("inlineCode",{parentName:"span"},"ExternalsPlugin"),"을 사용하여 대상을 제공합니다."))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{"data-th":"Option",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},(0,t.yg)("inlineCode",{parentName:"span"},"electron[[X].Y]-preload"))),(0,t.yg)("td",{"data-th":"Description",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},"렌더러 프로세스를 위해 ",(0,t.yg)("a",{href:"https://electronjs.org/",parentName:"span"},"Electron"),"으로 컴파일하여 ",(0,t.yg)("inlineCode",{parentName:"span"},"asyncChunkLoading"),"을 ",(0,t.yg)("inlineCode",{parentName:"span"},"true"),"로 설정한 ",(0,t.yg)("inlineCode",{parentName:"span"},"NodeTemplatePlugin"),", 브라우저 환경을 위한",(0,t.yg)("inlineCode",{parentName:"span"},"FunctionModulePlugin"),", ",(0,t.yg)("inlineCode",{parentName:"span"},"NodeTargetPlugin"),", CommonJS 및 Electron의 내장 모듈을 위한 ",(0,t.yg)("inlineCode",{parentName:"span"},"ExternalsPlugin"),"을 사용하여 대상을 제공합니다."))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{"data-th":"Option",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},(0,t.yg)("inlineCode",{parentName:"span"},"node[[X].Y]"))),(0,t.yg)("td",{"data-th":"Description",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},"Node.js와 유사한 환경에서 사용할 수 있도록 컴파일 합니다. (Node.js ",(0,t.yg)("inlineCode",{parentName:"span"},"require"),"를 사용하여 청크를 로드합니다.)"))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{"data-th":"Option",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},(0,t.yg)("inlineCode",{parentName:"span"},"node-webkit[[X].Y]"))),(0,t.yg)("td",{"data-th":"Description",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},"WebKit에서 사용하기 위해 컴파일하고 청크를 로드하기 위해 JSONP를 사용합니다. 내장된 Node.js 모듈 및 (실험적으로) ",(0,t.yg)("a",{href:"http://docs.nwjs.io/en/latest/",parentName:"span"},(0,t.yg)("inlineCode",{parentName:"a"},"nw.gui")),"를 가져올 수 있습니다."))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{"data-th":"Option",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},(0,t.yg)("inlineCode",{parentName:"span"},"nwjs[[X].Y]"))),(0,t.yg)("td",{"data-th":"Description",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},(0,t.yg)("inlineCode",{parentName:"span"},"node-webkit"),"과 동일합니다."))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{"data-th":"Option",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},(0,t.yg)("inlineCode",{parentName:"span"},"web"))),(0,t.yg)("td",{"data-th":"Description",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},"브라우저와 동일한 환경에서 사용하기 위하여 컴파일합니다. ",(0,t.yg)("strong",{parentName:"span"},"(기본값)")))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{"data-th":"Option",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},(0,t.yg)("inlineCode",{parentName:"span"},"webworker"))),(0,t.yg)("td",{"data-th":"Description",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},"웹 워커로 컴파일합니다."))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{"data-th":"Option",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},(0,t.yg)("inlineCode",{parentName:"span"},"esX"))),(0,t.yg)("td",{"data-th":"Description",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},"지정된 ECMAScript 버전으로 컴파일합니다. 예: es5, es2020"))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{"data-th":"Option",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},(0,t.yg)("inlineCode",{parentName:"span"},"browserslist"))),(0,t.yg)("td",{"data-th":"Description",parentName:"tr"},(0,t.yg)("span",{parentName:"td"},"browserslist-config에서 ",(0,t.yg)("strong",{parentName:"span"},"(browserslist config를 사용할 수 있는 경우 기본값)")," 플랫폼과 ES 기능을 추론합니다."))))),(0,t.yg)("p",null,"예를 들어, ",(0,t.yg)("inlineCode",{parentName:"p"},"target"),"을 ",(0,t.yg)("inlineCode",{parentName:"p"},'"electron-main"'),"으로 설정하면, webpack은 electron의 여러 변수를 추가합니다."),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"node"),"와 ",(0,t.yg)("inlineCode",{parentName:"p"},"electron"),"의 버전은 선택할 수 있습니다. 위 표에서 ",(0,t.yg)("inlineCode",{parentName:"p"},"[[X].Y]"),"로 표시됩니다."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"webpack.config.js")),(0,t.yg)("pre",null,(0,t.yg)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.yg)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// ..."),"\n  target",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token string",parentName:"code"},"'node12.18'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.yg)("p",null,"런타임 코드를 생성하는데 사용할 수 있는 ES 기능의 결정에 도움을 줍니다. (모든 청크와 모듈은 런타임 코드로 래핑 됩니다)"),(0,t.yg)("h4",null,(0,t.yg)("span",{id:"browserslist",parentName:"h4"}),"browserslist",(0,t.yg)("a",{href:"#browserslist","aria-hidden":"true",tabIndex:"-1",parentName:"h4"},(0,t.yg)("span",{className:"header-link",parentName:"a"}))),(0,t.yg)("p",null,"프로젝트에 browserslist 설정이 있으면, webpack은 이 설정을 사용합니다."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"런타임 코드를 생성하는데 사용할 수 있는 ES 기능을 결정합니다."),(0,t.yg)("li",{parentName:"ul"},"환경을 추론합니다. (예를 들어 일부 ",(0,t.yg)("a",{href:"/configuration/output/#outputenvironment",parentName:"li"},(0,t.yg)("inlineCode",{parentName:"a"},"output.environment"))," 설정이 있는 ",(0,t.yg)("inlineCode",{parentName:"li"},'target: "node"'),"와 동일한 ",(0,t.yg)("inlineCode",{parentName:"li"},"마지막 2개의 Node 버전"),").")),(0,t.yg)("p",null,"지원되는 browserslist"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"browserslist")," - 자동으로 browserslist 설정과 환경을 사용 (가장 근접한 ",(0,t.yg)("inlineCode",{parentName:"li"},"package.json"),"이나 ",(0,t.yg)("inlineCode",{parentName:"li"},"BROWSERSLIST")," 환경 변수, 자세한 사항은 ",(0,t.yg)("a",{href:"https://github.com/browserslist/browserslist#queries",parentName:"li"},"browserslist documentation"),"을 참고)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"browserslist:modern")," - 자동으로 해석된 browserslist 설정에서 ",(0,t.yg)("inlineCode",{parentName:"li"},"modern"),"사용"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"browserslist:last 2 versions")," - 명시적으로 browserslist 쿼리 사용(설정은 무시됨)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"browserslist:/path/to/config")," - browserslist 설정을 지정할 수 있음"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"browserslist:/path/to/config:modern")," - browserslist 설정 및 환경을 명시적으로 지정")),(0,t.yg)("h3",null,(0,t.yg)("span",{id:"string-1",parentName:"h3"}),"[string]",(0,t.yg)("a",{href:"#string-1","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.yg)("span",{className:"header-link",parentName:"a"}))),(0,t.yg)("p",null,"복수의 target을 작성하면 기능의 공통적인 하위 집합이 사용됩니다."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"webpack.config.js")),(0,t.yg)("pre",null,(0,t.yg)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.yg)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// ..."),"\n  target",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.yg)("span",{className:"token string",parentName:"code"},"'web'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.yg)("span",{className:"token string",parentName:"code"},"'es5'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.yg)("p",null,"Webpack은 웹 플랫폼을 위해 런타임 코드를 생성하고 ES5 기능만 사용합니다."),(0,t.yg)("p",null,"현재로서는 모든 target을 같이 혼용하여 사용하지 못합니다."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"webpack.config.js")),(0,t.yg)("pre",null,(0,t.yg)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.yg)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// ..."),"\n  target",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.yg)("span",{className:"token string",parentName:"code"},"'web'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.yg)("span",{className:"token string",parentName:"code"},"'node'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.yg)("p",null,"에러의 원인이 됩니다. 현재 webpack은 범용적인 target을 지원하지 않습니다."),(0,t.yg)("h3",null,(0,t.yg)("span",{id:"false",parentName:"h3"}),"false",(0,t.yg)("a",{href:"#false","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.yg)("span",{className:"header-link",parentName:"a"}))),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"target"),"을 ",(0,t.yg)("inlineCode",{parentName:"p"},"false"),"로 설정하면, 위 목록에서 미리 정의된 target 중에 원하는 target이 없으면 플러그인이 적용되지 않습니다."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"webpack.config.js")),(0,t.yg)("pre",null,(0,t.yg)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.yg)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// ..."),"\n  target",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token boolean",parentName:"code"},"false"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.yg)("p",null,"혹은 원하는 특정한 플러그인을 적용할 수 있습니다."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"webpack.config.js")),(0,t.yg)("pre",null,(0,t.yg)("code",{className:"hljs language-js",parentName:"pre"},(0,t.yg)("span",{className:"token keyword",parentName:"code"},"const")," webpack ",(0,t.yg)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.yg)("span",{className:"token function",parentName:"code"},"require"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.yg)("span",{className:"token string",parentName:"code"},"'webpack'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},";"),"\n\nmodule",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.yg)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.yg)("span",{className:"token comment",parentName:"code"},"// ..."),"\n  target",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token boolean",parentName:"code"},"false"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  plugins",(0,t.yg)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"["),"\n    ",(0,t.yg)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.yg)("span",{className:"token class-name",parentName:"code"},"webpack",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"web",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"JsonpTemplatePlugin"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"("),"options",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"."),"output",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,t.yg)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.yg)("span",{className:"token class-name",parentName:"code"},"webpack",(0,t.yg)("span",{className:"token punctuation",parentName:"span"},"."),"LoaderTargetPlugin"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.yg)("span",{className:"token string",parentName:"code"},"'web'"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.yg)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.yg)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.yg)("p",null,"target 또는 ",(0,t.yg)("a",{href:"/configuration/output/#outputenvironment",parentName:"p"},"환경"),"에 대한 정보가 없으면, ES2015를 사용합니다."))}s.isMDXComponent=!0,a.default=s}}]);