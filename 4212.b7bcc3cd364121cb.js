"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4212],{4212:function(e,a,n){n.r(a),n(7378);var t=n(2682);function s(){return s=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},s.apply(this,arguments)}function o(e){let{components:a,...n}=e;return(0,t.kt)("wrapper",s({components:a},n),(0,t.kt)("p",null,(0,t.kt)("em",{parentName:"p"},"Context는")," ",(0,t.kt)("inlineCode",{parentName:"p"},"require('./locale/' + name + '.json')"),"와 같은 ",(0,t.kt)("a",{href:"/guides/dependency-management/#require-with-expression",parentName:"p"},"표현식을 통한 요청"),"을 나타냅니다. 이러한 표현식을 만나면, webpack은 디렉터리 (",(0,t.kt)("inlineCode",{parentName:"p"},"'./locale/'"),")와 정규 표현식 (",(0,t.kt)("inlineCode",{parentName:"p"},"/^.*\\.json$/"),")을 추론합니다. 컴파일 시 ",(0,t.kt)("inlineCode",{parentName:"p"},"name"),"을 알 수 없기 때문에 webpack은 모든 파일을 번들에 모듈로 포함합니다."),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"ContextReplacementPlugin"),"을 사용하면 추론된 정보를 오버라이드 할 수 있습니다. 플러그인을 구성하는 방법에는 여러 가지가 있습니다."),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"usage",parentName:"h2"}),"Usage",(0,t.kt)("a",{href:"#usage","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-typescript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"webpack"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"ContextReplacementPlugin"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"\n  resourceRegExp",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," RegExp",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  newContentResource",(0,t.kt)("span",{className:"token operator",parentName:"code"},"?"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token builtin",parentName:"code"},"string"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  newContentRecursive",(0,t.kt)("span",{className:"token operator",parentName:"code"},"?"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token builtin",parentName:"code"},"boolean"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  newContentRegExp",(0,t.kt)("span",{className:"token operator",parentName:"code"},"?"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," RegExp\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"))),(0,t.kt)("p",null,"리소스(디렉터리)가 ",(0,t.kt)("inlineCode",{parentName:"p"},"resourceRegExp"),"와 일치하면, 플러그인은 기본 리소스, 재귀 플래그 또는 생성된 정규식을 각각 ",(0,t.kt)("inlineCode",{parentName:"p"},"newContentResource"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"newContentRecursive")," 또는 ",(0,t.kt)("inlineCode",{parentName:"p"},"newContextRegExp"),"로 바꿉니다. ",(0,t.kt)("inlineCode",{parentName:"p"},"newContentResource"),"가 상대적인 경우 이전 리소스를 기준으로 해결됩니다."),(0,t.kt)("p",null,"다음은 모듈 사용을 제한하는 작은 예제입니다."),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"webpack",(0,t.kt)("span",{className:"token punctuation",parentName:"span"},"."),"ContextReplacementPlugin"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token regex",parentName:"code"},"/moment[/\\\\]locale$/"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token regex",parentName:"code"},"/de|fr|hu/"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"moment/locale")," 컨텍스트는 ",(0,t.kt)("inlineCode",{parentName:"p"},"/de|fr|hu/"),"와 일치하는 파일로 제한됩니다. 따라서 해당 locale만 포함됩니다(자세한 내용은 ",(0,t.kt)("a",{href:"https://github.com/moment/moment/issues/2373",parentName:"p"},"이 이슈"),"를 참고하세요)."),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"content-callback",parentName:"h2"}),"Content Callback",(0,t.kt)("a",{href:"#content-callback","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-typescript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"webpack"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"ContextReplacementPlugin"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"\n  resourceRegExp",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," RegExp",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token function-variable function",parentName:"code"},"newContentCallback"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"data",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"void"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"newContentCallback")," 함수에는 ",(0,t.kt)("a",{href:"/api/plugins/module-factories/",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"ContextModuleFactory"),"의 ",(0,t.kt)("inlineCode",{parentName:"a"},"data")," 객체"),"가 제공되며 제공된 객체의 ",(0,t.kt)("inlineCode",{parentName:"p"},"request")," 속성을 덮어쓸 것으로 예상됩니다."),(0,t.kt)("p",null,"이 콜백을 사용하여 요청을 새 위치로 동적 리다이렉션할 수 있습니다."),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"webpack",(0,t.kt)("span",{className:"token punctuation",parentName:"span"},"."),"ContextReplacementPlugin"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token regex",parentName:"code"},"/^\\.\\/locale$/"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"context"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"if")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token operator",parentName:"code"},"!"),(0,t.kt)("span",{className:"token regex",parentName:"code"},"/\\/moment\\//"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"test"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"context",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"context",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"return"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n  Object",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"assign"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"context",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    regExp",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token regex",parentName:"code"},"/^\\.\\/\\w+/"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    request",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'../../locale'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 상대적으로 해결"),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"other-options",parentName:"h2"}),"Other Options",(0,t.kt)("a",{href:"#other-options","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"newContentResource")," 및 ",(0,t.kt)("inlineCode",{parentName:"p"},"newContentCreateContextMap")," 파라미터도 사용할 수 있습니다."),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-typescript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"webpack"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"ContextReplacementPlugin"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"\n  resourceRegExp",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," RegExp",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  newContentResource",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token builtin",parentName:"code"},"string"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  newContentCreateContextMap",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," object ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 런타임-요청(userRequest)을 컴파일-시간-요청(request)으로 매핑"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"이 두 파라미터를 함께 사용하여 보다 대상화된 방식으로 요청을 리다이렉션할 수 있습니다. ",(0,t.kt)("inlineCode",{parentName:"p"},"newContentCreateContextMap"),"을 사용하면 런타임 요청을 매핑하여 객체 형태로 요청을 컴파일 할 수 있습니다."),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"ContextReplacementPlugin"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token regex",parentName:"code"},"/selector/"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./folder'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./request'"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./request'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./other-request'"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./new-request'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))))}o.isMDXComponent=!0,a.default=o}}]);